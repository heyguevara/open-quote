<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 Macro file defining ant macros to support unit and system testing
-->

<project default="dummy" name="BuildTestingMacros.xml">

  <target name="dummy" />

  <macrodef name="run-system-tests-macro">
    <attribute name="name" />
    <attribute name="url" default="${server.base.url}" />
    <attribute name="suite" default="./Suite.html" />
    <attribute name="selenium.htmlSuite" default="${selenium.htmlSuite}" />
    <sequential>
      <_set-product.mountpoint-property-macro />

      <mkdir dir="${test.dir}/reports" />

      <pathify-product-name-macro property="product.subdir" value="@{name}/Test Suite" />

      <java errorproperty="system-test-errored" fork="yes" jar="${test.dir}/lib/selenium-server-standalone-2.39.0.jar" dir="@{name}">
        <arg line="-singleWindow -port 4445 -htmlSuite @{selenium.htmlSuite} http://@{url} @{suite} '${test.dir}/reports/@{name}.html'" />
      </java>

      <loadfile property="system.test.results@{name}" srcFile="${test.dir}/reports/@{name}.html" />
      <if>
        <contains string="${system.test.results@{name}}" substring='class="  status_failed"' />
        <then>
          <property name="system-test-failed" value="true" />
        </then>
      </if>

      <if>
        <istrue value="${system-test-failed}" />
        <then>
          <echo message="${line.separator}system-test-failed=true" file="${test.results.file}" append="yes" />
        </then>
      </if>

      <if>
        <istrue value="${system-test-errored}" />
        <then>
          <echo message="${line.separator}system-test-errored=true" file="${test.results.file}" append="yes" />
        </then>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="fail-on-system-test-error-macro">
    <sequential>
      <_initialise-ant-contribs-macro />

      <property file="${test.results.file}" />

      <if>
        <or>
          <istrue value="${system-test-errored}" />
          <istrue value="${system-test-failed}" />
        </or>
        <then>
          <fail message="System test errors/failures. Test reports are in ${test.dir}/reports." />
        </then>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="run-product-tests-macro">
    <attribute name="product" />
    <attribute name="url" default="${server.base.url}" />
    <attribute name="product.dir" default="${product.mountpoint}" />
    <attribute name="suite" default="./Suite.html" />
    <attribute name="selenium.htmlSuite" default="${selenium.htmlSuite}" />
    <sequential>
      <_set-product.mountpoint-property-macro />

      <property name="check.file" value="@{product.dir}/AIL/Base/Registry.xml" />

      <if>
        <not>
          <available file="${check.file}" />
        </not>
        <then>
          <fail message="Cannot find product file system ('${check.file}' not found). Please mount product webdav before running these tests" />
        </then>
      </if>

      <mkdir dir="${test.dir}/reports" />

      <pathify-product-name-macro property="product.subdir" value="@{product}/Test Suite" />

      <java errorproperty="product-test-errored" fork="yes" jar="${test.dir}/lib/selenium-server-standalone-2.39.0.jar" dir="@{product.dir}/${product.subdir}">
        <arg line="-singleWindow -htmlSuite @{selenium.htmlSuite} http://@{url} @{suite} '${test.dir}/reports/@{product}.html'" />
      </java>

      <loadfile property="product.test.results@{product}" srcFile="${test.dir}/reports/@{product}.html" />
      <if>
        <contains string="${product.test.results@{product}}" substring='class="  status_failed"' />
        <then>
          <property name="product-test-failed" value="true" />
        </then>
      </if>

      <if>
        <istrue value="${product-test-failed}" />
        <then>
          <echo message="${line.separator}product-test-failed=true" file="${test.results.file}" append="yes" />
        </then>
      </if>

      <if>
        <istrue value="${product-test-errored}" />
        <then>
          <echo message="${line.separator}product-test-errored=true" file="${test.results.file}" append="yes" />
        </then>
      </if>

    </sequential>
  </macrodef>

  <macrodef name="fail-on-product-test-error-macro">
    <sequential>
      <_initialise-ant-contribs-macro />

      <property file="${test.results.file}" />

      <if>
        <or>
          <istrue value="${product-test-errored}" />
          <istrue value="${product-test-failed}" />
        </or>
        <then>
          <fail message="Product test errors/failures. Test reports are in ${test.dir}/reports." />
        </then>
      </if>
    </sequential>
  </macrodef>

  <!-- Run the integration tests associated with a project. Reports are written to -->
  <!-- ${test.dir}/reports.                                                        -->
  <macrodef name="run-integration-tests-macro">
    <element name="junit-classpath" optional="no" />
    <sequential>
      <_initialise-ant-contribs-macro />

      <mkdir dir="${test.dir}/reports" />

      <junit showoutput="yes" printsummary="yes" fork="yes" errorproperty="integration-test-errored" failureproperty="integration-test-failed">
        <!--jvmarg value="-Djava.protocol.handler.pkgs=com.ail.core.urlhandler" /-->
        <!--jvmarg value="-Xrunjdwp:transport=dt_socket,address=8786,server=y,suspend=y" /-->
        <!--jvmarg value="-Duser.language=en" /-->
        <!--jvmarg value="-Duser.country=US" /-->

        <classpath>
          <dirset dir="${test.dir}" includes="integration-test.jar" />
          <junit-classpath />
        </classpath>

        <formatter type="xml" />

        <batchtest fork="yes" todir="${test.dir}/reports" filtertrace="no">
          <fileset dir="${test.dir}/integration-test.jar" includes="**/*Test*.class" excludes="**/*$*" />
        </batchtest>
      </junit>

      <if>
        <istrue value="${integration-test-failed}" />
        <then>
          <echo message="${line.separator}integration-test-failed=true" file="${test.results.file}" append="yes" />
        </then>
      </if>

      <if>
        <istrue value="${integration-test-errored}" />
        <then>
          <echo message="${line.separator}integration-test-errored=true" file="${test.results.file}" append="yes" />
        </then>
      </if>

    </sequential>
  </macrodef>

  <macrodef name="format-unit-test-results-macro">
    <sequential>
      <junitreport todir="${test.dir}/reports">
        <fileset dir="${test.dir}/reports">
          <include name="TEST-*.xml" />
        </fileset>
        <report format="frames" todir="${test.dir}/reports/html" />
      </junitreport>
    </sequential>
  </macrodef>

  <macrodef name="fail-on-integration-test-error-macro">
    <sequential>
      <_initialise-ant-contribs-macro />

      <property file="${test.results.file}" />

      <if>
        <or>
          <istrue value="${integration-test-errored}" />
          <istrue value="${integration-test-failed}" />
        </or>
        <then>
          <fail message="Integration test errors/failures. Test reports are in ${test.dir}/reports." />
        </then>
      </if>
    </sequential>
  </macrodef>

  <!-- Run the unit tests associated with a project. Reports are written to -->
  <!-- ${test.dir}/reports.                                                 -->
  <macrodef name="run-unit-tests-macro">
    <element name="junit-classpath" optional="no" />
    <sequential>
      <_initialise-ant-contribs-macro />

      <mkdir dir="${test.dir}/reports" />

      <junit showoutput="yes" printsummary="yes" fork="yes" errorproperty="errored" failureproperty="failed">
        <jvmarg value="-Djava.protocol.handler.pkgs=com.ail.core.urlhandler" />
        <!-- To enable the debugger on the unit test process:                              -->
        <!-- jvmarg value="-Xrunjdwp:transport=dt_socket,address=8786,server=y,suspend=y" /-->

        <classpath>
          <dirset dir="${test.dir}" includes="unit-test.jar" />
          <junit-classpath />
        </classpath>

        <formatter type="xml" />

        <batchtest fork="no" todir="${test.dir}/reports" filtertrace="no">
          <fileset dir="${test.dir}/unit-test.jar" includes="**/*Test*.class" excludes="**/*$*.class" />
        </batchtest>
      </junit>

      <if>
        <or>
          <istrue value="${errored}" />
          <istrue value="${failed}" />
        </or>
        <then>
          <fail message="Unit test errors/failures" />
        </then>
      </if>

    </sequential>
  </macrodef>

  <macrodef name="start-grinder-console-macro">
    <sequential>
      <java classname="net.grinder.Console" fork="true">
        <classpath>
          <fileset dir="${test.dir}/lib" includes="*.jar" />
        </classpath>
      </java>
    </sequential>
  </macrodef>

  <macrodef name="start-grinder-agent-macro">
    <sequential>

      <jar file="${test.dir}/jar.jar" basedir="${test.dir}/test.jar" includes="com/ail/**/*" />

      <java classname="net.grinder.Grinder" fork="true" dir="test.jar/grinder">
        <classpath>
          <fileset dir="${test.dir}" includes="jar.jar" />
          <fileset dir="${test.dir}/lib" includes="*.jar" />
          <fileset dir="${jboss.dir}">
            <include name="client/jbossall-client.jar" />
            <include name="server/default/deploy/jboss-portal.sar/lib/*.jar" />
            <exclude name="server/default/deploy/jboss-portal.sar/lib/portal-samples-lib.jar" />
            <include name="server/default/lib/saxon*.jar" />
            <include name="lib/endorsed/xalan.jar" />
          </fileset>
        </classpath>
        <env key="DYLD_LIBRARY_PATH" value="/Applications/jprofiler4/bin/macos:$DYLD_LIBRARY_PATH" />
        <arg value="./grinder.properties" />
      </java>
    </sequential>
  </macrodef>

  <macrodef name="start-grinder-proxy-macro">
    <sequential>
      <echo message="starting The Grinder's TCPProxy on port 8001. Script will be written to: ./test.jar/grinder/scratch.py" />
      <java output="./test.jar/grinder/scratch.py" classname="net.grinder.TCPProxy" fork="true">
        <classpath>
          <fileset dir="${test.dir}/lib" includes="*.jar" />
        </classpath>
        <arg value="-http" />
        <arg value="-console" />
      </java>
    </sequential>
  </macrodef>

  <macrodef name="generate-sample-data-macro">
    <sequential>
      <path id="generate.classpath">
        <fileset dir="${module.dir}/com/ail/core/main" includes="*.jar" />
        <fileset dir="${module.dir}/com/liferay/portal/main" includes="mysql.jar" />
        <dirset dir="${module.dir}/com/ail/core/main" includes="core.jar" />
        <dirset dir="${module.dir}/com/ail/insurance/main" includes="insurance.jar" />
      </path>

      <property name="actuarial" value="jdbc:mysql://localhost/openunderwriter_2_0_AIL_Base_DataSource_Master_Motor" />
      <property name="report" value="jdbc:mysql://localhost/openunderwriter_2_0_AIL_Base_Report" />

      <parallel>
        <java fork="yes" classname="com.ail.insurance.actuarial.DataGenerator" classpathref="generate.classpath">
          <arg line="-q ${mysql.driver} ${actuarial} 'root' '${mysql.root.password}'" />
        </java>

        <java fork="yes" classname="com.ail.insurance.policy.DataGenerator" classpathref="generate.classpath">
          <arg line="-q ${mysql.driver} ${report} 'root' '${mysql.root.password}'" />
        </java>
      </parallel>
    </sequential>
  </macrodef>
</project>