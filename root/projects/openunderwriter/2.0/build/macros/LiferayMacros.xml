<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 Macro file defining a collection of ant macros concerned with managing Liferay
-->

<project default="dummy" name="BuildLiferayMacros.xml" xmlns:ivy="antlib:org.apache.ivy.ant">

  <target name="dummy" />

  <target name="_install.base" unless="base">
    <!-- Get the Liferay zip into the cache -->
    <fetch-dependency-path-macro org="liferay" name="liferay-portal" rev="${version}" pathid="liferay.zip.pathid" />
    <property name="liferay.zip" refid="liferay.zip.pathid" />

    <!-- Unpack the cached zip into the dev tree -->
    <mkdir dir="${target.dir}" />
    <unzip overwrite="yes" dest="${target.dir}" src="${liferay.zip}" />

    <copy todir="${liferay.dir}/data" preservelastmodified="yes">
      <fileset dir="${content.setup.dir}" includes="document_library/**"/>
    </copy>

    <exec os="Linux,Mac OS X,Solaris,Sun OS" executable="sh" dir="${jboss.dir}/bin">
      <arg line="-c 'chmod 755 *.sh'" />
    </exec>
  </target>

  <!-- Macro to install Liferay in a development tree.   -->
  <!-- @param version The version of Liferay to install. -->
  <macrodef name="install-liferay-macro">
    <attribute name="version" />
    <sequential>
      <available file="${liferay.dir}/readme.html" property="base" />
      <antcall target="_install.base">
        <param name="version" value="@{version}" />
      </antcall>
    </sequential>
  </macrodef>

  <!-- Macro to uninstall liferay in a development tree.   -->
  <!-- @param version The version of liferay to uninstall. -->
  <macrodef name="uninstall-liferay-macro">
    <attribute name="version" />
    <sequential>
      <!-- Delete the installed tree -->
      <delete dir="${liferay.dir}" failonerror="no" />
    </sequential>
  </macrodef>

  <macrodef name="wait-for-liferay-to-start-macro">
    <sequential>
      <waitfor maxwait="30" maxwaitunit="minute" checkevery="250" timeoutproperty="liferay-startup-failed">
        <http url="http://localhost:8080" />
      </waitfor>
      <fail if="liferay-startup-failed" message="Liferay failed to start" />
    </sequential>
  </macrodef>

  <macrodef name="wait-for-liferay-to-stop-macro">
    <sequential>
      <waitfor maxwait="5" maxwaitunit="minute" checkevery="250">
        <not>
          <http url="http://localhost:8080" />
        </not>
      </waitfor>
      <sleep seconds="5" />
    </sequential>
  </macrodef>

  <!-- Macro to start the liferay server if it isn't running already. -->
  <macrodef name="start-liferay-macro">
    <sequential>
      <_initialise-ant-contribs-macro />

      <property name="liferay.javaopts" value="-Xmx2048m -XX:MaxPermSize=512m -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n"/>

      <if>
        <not>
          <socket server="localhost" port="8080" />
        </not>
        <then>
          <exec dir="${jboss.dir}/bin" executable="${jboss.dir}/bin/standalone.sh" os="Linux,Mac OS X,Solaris,Sun OS">
            <env key="JAVA_OPTS" value="${liferay.javaopts}" />
          </exec>
          <exec dir="${jboss.dir}/bin" executable="${jboss.dir}/bin/standalone.bat" os="Windows 2000,Windows XP,Windows 7, Windows 8">
            <env key="JAVA_OPTS" value="${liferay.javaopts}" />
          </exec>
        </then>
      </if>
    </sequential>
  </macrodef>

  <!-- Macro to stop liferay if it is running. -->
  <macrodef name="stop-liferay-macro">
    <sequential>
      <_initialise-ant-contribs-macro />

      <if>
        <socket server="localhost" port="8080" />
        <then>
          <exec dir="${jboss.dir}/bin" executable="${jboss.dir}/bin/jboss-cli.sh" os="Linux,Mac OS X,Solaris,Sun OS">
            <arg line="--connect :shutdown" />
          </exec>
          <exec dir="${jboss.dir}/bin" executable="${jboss.dir}/bin/jboss-cli.bat" os="Windows 2000,Windows XP,Windows 7">
            <arg line="--connect :shutdown" />
          </exec>
          <wait-for-liferay-to-stop-macro />
          <echo level="info" message="Liferay stopped." />
        </then>
      </if>

    </sequential>
  </macrodef>

  <!-- Macro which sets the ${liferay-running} to true if liferay is running -->
  <macrodef name="set-liferay-running-property-macro">
    <sequential>
      <condition property="liferay-running">
        <and>
          <socket server="localhost" port="8080" />
        </and>
      </condition>
    </sequential>
  </macrodef>

  <!-- Macro to export content from the liferay repository into the source tree. -->
  <macrodef name="_content-export-macro">
    <sequential>
      
      <!-- If mysql isn't the right version, the dump files will be hard/impossible to diff. -->
      <verify-mysql-version-macro required="5.6" severity="fail"/>

      <stop-liferay-macro />

      <!-- List of tables that should _not_ be included in the backup. This list -->
      <!-- should correspond to the tables created in the OpenQuote-Table-Setup  -->
      <!-- script.                                                               -->
      <property name="ignoreTableList">
          --ignore-table ${dbname}.config
          --ignore-table ${dbname}.saved_policy
          --ignore-table ${dbname}.saved_policy_summary          
          --ignore-table ${dbname}.bordereau
          --ignore-table ${dbname}.commercial_address
          --ignore-table ${dbname}.commercial_addressbook
          --ignore-table ${dbname}.commercial_company
          --ignore-table ${dbname}.commercial_organisation
          --ignore-table ${dbname}.commercial_party
          --ignore-table ${dbname}.commercial_person
          --ignore-table ${dbname}.core_Attribute
          --ignore-table ${dbname}.core_Type
          --ignore-table ${dbname}.core_configure_Component
          --ignore-table ${dbname}.core_configure_Group
          --ignore-table ${dbname}.core_configure_Parameter
          --ignore-table ${dbname}.insurance_AssessmentLine
          --ignore-table ${dbname}.insurance_AssessmentSheet
          --ignore-table ${dbname}.insurance_Asset
          --ignore-table ${dbname}.insurance_Coverage
          --ignore-table ${dbname}.insurance_Policy
          --ignore-table ${dbname}.insurance_Section
          --ignore-table ${dbname}.party_Address
          --ignore-table ${dbname}.party_Party
          --ignore-table ${dbname}.party_Person
      </property>

      <!-- reorganise ${ignoreTableList} list into a single line -->
      <loadresource property="oneLineIgnoreTableList">
        <propertyresource name="ignoreTableList" />
        <filterchain>
          <tokenfilter>
            <filetokenizer />
            <replaceregex pattern="\n" replace="" flags="g" />
          </tokenfilter>
        </filterchain>
      </loadresource>

      <sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost/${dbname}" userid="root" password="${mysql.root.password}">
        <classpath>
          <fileset dir="${buildlib.dir}" includes="*.jar" />
        </classpath>
        update AssetEntry set viewCount=0;
        update DLFileEntry set readCount=0;
        update DLFileRank set createDate="2014-06-10";
        update Release_ set modifiedDate=createDate,buildDate=createDate;
        update Marketplace_App set createDate="2014-06-10",modifiedDate="2014-06-10";
        update Group_ as g1, (select typeSettings from Group_ where name="OpenQuote") as g2 set g1.typeSettings=g2.typeSettings where g1.name="Guest";
      </sql>
        
      <exec executable="bash" dir="." os="Linux,Mac OS X,Solaris,Sun OS">
        <arg line='-l -c "mysqldump --user=root --password=${mysql.root.password} ${oneLineIgnoreTableList} --opt --dump-date=FALSE --extended-insert=FALSE ${dbname} > ${mysql.setup.file}"' />
      </exec>

      <exec executable="cmd" dir="." os="Windows 2000,Windows XP,Windows 7, Windows 8">
        <arg line='/c "mysqldump --user=root --password=${mysql.root.password} ${oneLineIgnoreTableList} --opt --dump-date=FALSE --extended-insert=FALSE ${dbname} > ${mysql.setup.file}"' />
      </exec>

      <sync todir="${content.setup.dir}/document_library" verbose="yes">
        <fileset dir="${liferay.dir}/data/document_library" />
      </sync>

    </sequential>
  </macrodef>

  <!-- Macro to compile a liferay theme war project into an exploded war deployment folder -->
  <macrodef name="compile-theme-war-macro">
    <attribute name="extend" default="" />
    <sequential>

      <!-- make sure 'if' is avaialble -->
      <_initialise-ant-contribs-macro />

      <!-- this will set ${deploy.unit} based on the current project's name -->
      <_set-output-dir-property-macro />

      <mkdir dir="${output.dir}/WEB-INF/classes" />

      <copy todir="${output.dir}" overwrite="true" preservelastmodified="true">
        <fileset dir="${deploy.dir}/ROOT.war/html/themes/_unstyled" excludes="templates/**" />
      </copy>

      <copy todir="${output.dir}/templates" overwrite="true" preservelastmodified="true">
        <fileset dir="${deploy.dir}/ROOT.war/html/themes/_unstyled/templates" excludes="init.vm" includes="*.vm" />
      </copy>

      <copy todir="${output.dir}" overwrite="true" preservelastmodified="true">
        <fileset dir="${deploy.dir}/ROOT.war/html/themes/_styled" />
      </copy>

      <if>
        <not>
          <equals arg1="@{extend}" arg2=""/>
        </not>
        <then>
          <copy todir="${output.dir}" overwrite="true" preservelastmodified="true">
            <fileset dir="${deploy.dir}/@{extend}" />
          </copy>
        </then>
      </if>

      <_copy-resources-macro srcdir="./WEB-INF/src" destdir="${output.dir}/WEB-INF/classes" />

      <_copy-resources-macro srcdir="." destdir="${output.dir}" />

      <compile-css-macro target="${output.dir}/" />

      <touch file="${output.dir}.dodeploy" />
    </sequential>
  </macrodef>

  <macrodef name="compile-css-macro">
    <attribute name="target" />
    <sequential>

      <path id="sass2css.classpath">
        <pathelement location="${deploy.dir}/ROOT.war/WEB-INF/classes" />
        <fileset dir="${module.dir}/com/liferay/portal/main" includes="*.jar" />
        <fileset dir="${deploy.dir}/ROOT.war/WEB-INF/lib" includes="*.jar" excludes="lucene*"/>
        <fileset dir="${buildlib.dir}" includes="activation-1.1.jar,jargs-1.0.jar,servlet-api-2.4-20040521.jar,jsp-api-2.0-20040521.jarqdox-1.6.jar" />
      </path>

      <java fork="yes" newenvironment="true" classname="com.liferay.portal.tools.SassToCssBuilder" classpathref="sass2css.classpath">
        <jvmarg value="-Xmx128m"/>
        <jvmarg value="-Dliferay.lib.portal.dir=${deploy.dir}/ROOT.war/WEB-INF/lib" />
        <arg value="sass.dir=/" />
        <arg value="sass.docroot.dir=@{target}" />
        <arg value="sass.portal.common.dir=${deploy.dir}/ROOT.war/html/css/common" />
      </java>

    </sequential>
  </macrodef>

</project>