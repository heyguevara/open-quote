<!--
 This file defines the common section used in all build files
 Ant build file for the core project.
 $Revision: 1.41 $
 $State: Exp $
 $Date: 2007/11/23 20:59:04 $
 $Source: /home/bob/CVSRepository/development/BuildCommon.xml,v $
-->

<project name="BuildCommon.xml" default="dummy">
  <!-- set global properties for this build -->
  <property environment="env" />
  <property name="repo.dir" value="${development.dir}/repo" />
  <property name="domain.dir" value="${basedir}/domain/jboss" />
  <property name="lib" value="${basedir}/jars" />
  <property name="tmp" value="${build.dir}/tmp" />
  <property name="build.number.file" value="${basedir}/Build.number" />
  <property name="list" value="" />
  <property name="keystore" value="${basedir}/../development/data/keystore" />
  <property name="copyfilter.dir" value="${deploy.dir}/lib" />
  <property name="copyfilter.file" value="${copyfilter.dir}/filter" />
  <property name="java.naming.factory.initial" value="org.jnp.interfaces.NamingContextFactory" />
  <property name="java.naming.provider.url" value="jnp://localhost:1099" />
  <property name="grinder.properties" value="${basedir}/grinder.properties" />
  <property name="connectionpoolloader.params" value="jndiname=java:/ConfigureDS;table=config" />
  <property name="build.sysclasspath" value="last"/>
  <property name="hsql.data.dir" value="${jboss.dir}/server/default/data/hypersonic"/>
  <!-- default build.type is developer, cruisecontrol overrides this with a -D on the command line -->
  <property name="build.type" value="developer"/>

  <target name="dummy" />

  <classfileset includes="${development.dir}/lib/*.jar" />

  <!-- Convert the named property from a windows style path to unix style -->
  <!-- e.g. "c:\my\folder\file.txt" -> "c:/my/folder/file.txt"            -->
  <macrodef name="unixify-path-macro">
    <attribute name="property"/>
    <sequential>
      <script language="beanshell">
        val=project.getProperty("@{property}");
        project.setProperty("@{property}", val.replaceAll("\\\\","/"));
      </script>
    </sequential>
  </macrodef>

  <!-- The if-macro sets the named property to "true" if the specified condition evaluates to true. The -->
  <!-- property is "forced" to change breaking ant's normal immutable property rule.                    -->
  <scriptdef name="if-macro" language="beanshell">
    <attribute name="property"/>
    <attribute name="condition"/>
    <attribute name="arg1"/>
    <attribute name="arg2"/>
        property=attributes.get("property");
        condition=attributes.get("condition"); 
        arg1=attributes.get("arg1");
        arg1=arg1.replaceAll("\\\\","/");
        arg2=attributes.get("arg2");
    
        project.setProperty(property,"false");

        if (condition.equals("equals")) {
          if (arg1.equals(arg2)) {
	          project.setProperty(property,"true");
          }
        }
        else if (condition.equals("exists")) {
          if (new File(arg1).exists()) {
            project.setProperty(property,"true");
          }
        }
        else if (condition.equals("defined")) {
          if (arg1.length()!=0) {
            project.setProperty(property,"true");
          }
        }
        else {
          print("Condition "+condition+" is not understood");
          throw new Exception("Condition "+condition+" is not understood");
        }
  </scriptdef>

  <!-- Run a specified target in all the ant files one level down in the directory structure -->
  <macrodef name="subant-macro">
    <attribute name="target" />
    <attribute name="excludes" default="classes/**"/>
    <attribute name="includes" default="*/Build.xml"/>
    <sequential>
      <subant target="@{target}" failonerror="yes">
        <fileset dir="." includes="@{includes}" excludes="@{excludes}" />
      </subant>
    </sequential>
  </macrodef>

  <!-- Macro to truncate the file copy filter -->
  <macrodef name="truncate-filter-macro">
    <sequential>
      <echo file="${copyfilter.file}" append="no" message="# Build generated file - do not edit!${line.separator}" />
    </sequential>
  </macrodef>

  <!-- Macro which sets the ${mysql-running} to true if mysql is running -->
  <macrodef name="set-mysql-running-property-macro">
    <sequential>
      <condition property="mysql-running">
        <socket server="localhost" port="3306"/>
      </condition>
    </sequential>
  </macrodef>

  <target name="ail-reset-timedout=false">
    <echo message="Configurations reset"/>
  </target>
  
  <target name="ail-reset-timedout=true">
    <fail message="Configuration reset failed"/>
  </target>
  
  <target name="ail-reset-configurations-if-jboss-running" if="jboss-running">
    <waitfor maxwait="30" maxwaitunit="minute" timeoutproperty="ail-reset-timedout">
      <http url="http://localhost:8080/configure/configureOperationServlet?op=resetNamedConfiguration&amp;namespace=all"/>
    </waitfor>
    <property name="ail-reset-timedout" value="false"/>
    <antcall target="ail-reset-timedout=${ail-reset-timedout}"/>    
  </target>
  
  <target name="ail-reset-configurations-if-jboss-not-running" unless="jboss-running">
    <parallel>
      <start-jboss-macro />
      <sequential>
        <waitfor maxwait="30" maxwaitunit="minute" timeoutproperty="ail-reset-timedout">
          <http url="http://localhost:8080/configure/configureOperationServlet?op=resetNamedConfiguration&amp;namespace=all"/>
        </waitfor>
        <stop-jboss-macro />
      </sequential>
    </parallel>
    <property name="ail-reset-timedout" value="false"/>
    <antcall target="ail-reset-timedout=${ail-reset-timedout}"/>    
  </target>

  <macrodef name="ail-reset-configurations-macro">
    <sequential>
		<set-jboss-running-property-macro/>
      	<antcall target="ail-reset-configurations-if-jboss-running"/>
    	<antcall target="ail-reset-configurations-if-jboss-not-running"/>
    </sequential>
  </macrodef>

  <!-- replace an exploded jar folder with a jar file -->
  <macrodef name="unexplode-jar-macro">
    <attribute name="jar" />
    <sequential>
      <jar basedir="@{jar}" destfile="@{jar}.tmp"/>
      <delete dir="@{jar}"/>
      <move file="@{jar}.tmp" tofile="@{jar}"/>
    </sequential>
  </macrodef>

  <macrodef name="release-source-macro">
    <sequential>
      <mkdir dir="${repo.dir}/ail/${ant.project.name}/${major.version}.${minor.version}" />
      <zip update="yes" basedir=".." destfile="${repo.dir}/ail/${ant.project.name}/${major.version}.${minor.version}/${ant.project.name}-${major.version}.${minor.version}-snapshot-src.zip" includes="${ant.project.name}/**" excludes="${ant.project.name}/target/**, **/.svn/**" />
    </sequential>
  </macrodef>
</project>

