<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 Build Macros for building J2EE projects
-->

<project default="dummy" name="BuildJ2EEMacros.xml">

  <target name="dummy" />

  <!-- Macro to figure out the deploy path from the ant project name. By convention ant J2EE     -->
  <!-- projects have names like core:something.war. This Beanshell script creates a new -->
  <!-- ant property "deploy.unit" trimming off the "core:" bit (e.g."something.war")    -->
  <macrodef name="_set_output_dir_property_macro">
    <sequential>
      <script language="beanshell">
        <classpath>
          <fileset dir="${bootlib.dir}" includes="*.jar"/>
        </classpath>
	      projectName = project.getName();
	      deployUnit = projectName.replaceAll("^.*:", "");
          project.setProperty("generated.source.dir", project.getProperty("target.dir") + "/generated/" + deployUnit);
	      project.setProperty("deploy.unit", deployUnit);
		  if (projectName.contains(".war") || projectName.contains("-ejb.jar")) {
	          deployDir = project.getProperty("deploy.dir");
              outputDir = deployDir + "/" + deployUnit;
          }
          else if (projectName.contains(":modules")) {
              deploy.dir = project.getProperty("jboss.dir");
              rootPath = deployUnit.replaceAll("/[^/]*$","");
              name = deployUnit.replaceAll(".*/([^.]*)[.]jar","$1");
              outputDir = deploy.dir + "/" + rootPath + "/" + name + "/main/" + name + ".jar";
          }
	      else if (projectName.contains(":unit-test.jar")) {
              outputDir=project.getProperty("test.dir") + "/unit-test.jar";
	      }
	      else if (projectName.contains(":integration-test.jar")) {
	          outputDir = project.getProperty("test.dir") + "/integration-test.jar";
	      }
	      else if (projectName.contains(":test.jar")) {
	          outputDir = project.getProperty("test.dir") + "/test.jar";
	      }
	      else {
              outputDir = project.getProperty("target.dir") + "/"+deployUnit;
	      }
          project.setProperty("output.dir", outputDir);
	    </script>
    </sequential>
  </macrodef>

  <macrodef name="_copy-resources-macro">
    <attribute name="srcdir" />
    <attribute name="destdir" />
    <sequential>
      <!-- install text files (properties, xml, etc) with the filter turned on -->
      <copy todir="@{destdir}">
        <filterset refid="copy.filterset" />
        <fileset dir="@{srcdir}" includes="**/*.properties, **/*.xml, **/*.wsdl, **/*.jnlp, **/*.html, **/*.MF, **/*.bs, **/*.xsl, **/*.xslt, **/*.drl, **/*.rule, **/*.dsl, **/*.janino, **/*.vm" excludes="Build.xml, Ivy.xml" />
      </copy>

      <!-- copy binary files with the filter turned off -->
      <copy todir="@{destdir}">
        <fileset dir="@{srcdir}" includes="**/*.Processor, **/*.pdf, **/*.gif, **/*.png, **/*.ico, **/*.jpg, **/*.xls" />
      </copy>
    </sequential>
  </macrodef>

  <!-- Macro to build an exploded jar from a source folder.                                         -->
  <!-- The output folder for the compilation is derived from the ant project name. For example, if  -->
  <!-- the ant project's name (taken from it's 'name' attribute) is "core.ear/core.jar", the output -->
  <!-- folder will be ${deploy.dir}/deploy/core.ear/core.jar.                                       -->
  <macrodef name="compile-exploded-jar-macro">
    <attribute name="overlay" default="false" />
    <element name="javac-classpath" optional="no" />
    <sequential>

      <_set_output_dir_property_macro />
      <mkdir dir="${output.dir}" />
      <mkdir dir="${generated.source.dir}" />

      <!-- compile the java source -->
      <javac destdir="${output.dir}" verbose="no" debug="yes" target="1.6" includeantruntime="false">
        <compilerarg line="-s ${generated.source.dir}" />
        <src path="." />
        <classpath>
          <fileset dir="${buildlib.dir}" includes="*.jar" />
          <javac-classpath />
        </classpath>
      </javac>

      <_copy-resources-macro srcdir="." destdir="${output.dir}" />

    </sequential>
  </macrodef>

  <!-- Macro to build an exploded ejb jar file.                                 -->
  <!-- @param overlay True if the effect of running this macro should be to     -->
  <!--   overlay the contents of this EJB's source files on top of an already   -->
  <!--   build EJB of the same name.                                            -->
  <macrodef name="compile-exploded-ejb-jar-macro">
    <attribute name="overlay" default="false" />
    <element name="javac-classpath" optional="no" />
    <sequential>

      <_set_output_dir_property_macro />

      <mkdir dir="${output.dir}" />

      <!-- compile the java source -->
      <javac destdir="${output.dir}" srcdir="." verbose="no" debug="yes" target="1.6" includeantruntime="false">
        <classpath>
          <fileset dir="${buildlib.dir}" includes="*.jar" />
          <javac-classpath />
        </classpath>
      </javac>

      <_copy-resources-macro srcdir="." destdir="${output.dir}" />
      
      <touch file="${output.dir}.dodeploy" />
    </sequential>
  </macrodef>

  <target name="_compile-exploded-war-macro-docompile=true">
    <!-- compile the java source -->
    <javac destdir="${output.dir}/WEB-INF/classes" verbose="no" debug="yes" target="1.6" includeantruntime="false">
      <compilerarg line="-s ${generated.source.dir}" />
      <src path="./WEB-INF/src" />
      <classpath>
        <fileset dir="${buildlib.dir}" includes="*.jar" />
        <path path="${project.classpath}" />
      </classpath>
    </javac>

    <_copy-resources-macro srcdir="./WEB-INF/src" destdir="${output.dir}/WEB-INF/classes" />
  </target>

  <target name="_compile-exploded-war-macro-docompile=false" />

  <!-- Macro to compile a war project into an exploded war deployment folder -->
  <macrodef name="compile-exploded-war-macro">
    <attribute name="overlay" default="false" />
    <element name="javac-classpath" optional="no" />
    <sequential>

      <!-- this will set ${deploy.unit} based on the current projects name -->
      <_set_output_dir_property_macro />

      <path id="_temp">
        <javac-classpath />
      </path>
      <property name="project.classpath" refid="_temp" />

      <mkdir dir="${output.dir}" />
      <mkdir dir="${output.dir}/WEB-INF/classes" />
      <mkdir dir="${generated.source.dir}" />

       <_copy-resources-macro srcdir="." destdir="${output.dir}" />
 
      <!-- compile java code if there is any -->
      <if-macro condition="exists" property="docompile" arg1="${basedir}/WEB-INF/src" />
      <antcall target="_compile-exploded-war-macro-docompile=${docompile}" />

    </sequential>
  </macrodef>

  <macrodef name="generate-wsdl-for-endpoint-macro">
    <attribute name="classname" />
    <attribute name="name" />
    <attribute name="namespace" />
    <sequential>
      <_set_output_dir_property_macro />

      <mkdir dir="${output.dir}/META-INF/wsdl" />

      <!-- build wsdl for service -->
      <axis-java2wsdl location="http://this.value.is.replaced.by.jboss" serviceElementName="@{name}Service" servicePortName="@{name}Endpoint" output="${output.dir}/META-INF/wsdl/@{name}.wsdl" use="LITERAL" className="@{classname}" namespace="@{namespace}">
        <mapping namespace="urn:AIL" package="com.ail.core.configure.server" />
        <classpath>
          <fileset dir="${jboss.dir}/client" includes="jbossall-client.jar" />
        </classpath>
      </axis-java2wsdl>
      <compile-exploded-war-macro />
    </sequential>
  </macrodef>

  <!-- If we're deleting an exploded jar in overlay mode we only want to delete  -->
  <!-- things that we have the source for. For example: for every .java file the -->
  <!-- project has we delete the corresponding .class file - but other .class    -->
  <!-- files are left alone.                                                     -->
  <target name="_delete-exploded-jar-overlay=true">
    <_set_output_dir_property_macro />
    <delete failonerror="no">
      <fileset dir="${output.dir}" includes="**/*.MF, **/*.xml, **/*.png, **/*.ico, **/*.gif, **/*.jpg, **/*.jar" excludes="Build.xml, Ivy.xml">
        <present targetdir="${basedir}">
          <mapper type="identity" />
        </present>
      </fileset>
      <fileset dir="${output.dir}" includes="**/*class">
        <present targetdir="${basedir}">
          <mapper type="glob" from="*.class" to="*.java" />
        </present>
      </fileset>
      <fileset dir="{generated.source.dir}" />
    </delete>
  </target>

  <!-- If we're deleting an exploded war in overlay mode we only want to delete  -->
  <!-- things that we have the source for. For example: for every .java file the -->
  <!-- project has we delete the corresponding .class file - but other .class    -->
  <!-- files are left alone.                                                     -->
  <target name="_delete-exploded-war-overlay=true">
    <_set_output_dir_property_macro />
    <delete failonerror="no">
      <fileset dir="${output.dir}" includes="**/*.MF, **/*.jsp, **/*.xml, **/*.gif, **/*.png, **/*.ico, **/*.jpg, **/*.jar" excludes="Build.xml, Ivy.xml, sshWEB-INF/src/*">
        <present targetdir="${basedir}">
          <mapper type="identity" />
        </present>
      </fileset>
      <fileset dir="${output.dir}/WEB-INF/classes" includes="**/*class">
        <present targetdir="${basedir}/WEB-INF/src">
          <mapper type="glob" from="*.class" to="*.java" />
        </present>
      </fileset>
      <fileset dir="${output.dir}/WEB-INF/classes" includes="**/*.xml,**/*.properties">
        <present targetdir="${basedir}/WEB-INF/src">
          <mapper type="identity" />
        </present>
      </fileset>
    </delete>
  </target>

  <!-- Deleting a exploded jar in non-overlay mode is simple - just delete the -->
  <!-- whole exploded jar.                                                     -->
  <target name="_delete-exploded-jar-overlay=false">
    <_set_output_dir_property_macro />
    <delete dir="${generated.source.dir}" failonerror="no" />
    <delete dir="${output.dir}" failonerror="no" />
  </target>

  <!-- Deleting a exploded war in non-overlay mode is simple - just delete the -->
  <!-- whole exploded war.                                                     -->
  <target name="_delete-exploded-war-overlay=false">
    <_set_output_dir_property_macro />
    <delete dir="${output.dir}" failonerror="no" />
  </target>

  <!-- Delete an exploded jar projects output folder -->
  <macrodef name="delete-exploded-jar-macro">
    <attribute name="overlay" default="false" />
    <sequential>
      <antcall target="_delete-exploded-jar-overlay=@{overlay}" />
    </sequential>
  </macrodef>

  <!-- Delete an exploded ejb jar projects output folder -->
  <macrodef name="delete-exploded-ejb-jar-macro">
    <attribute name="overlay" default="false" />
    <sequential>
      <delete-exploded-jar-macro overlay="@{overlay}" />
    </sequential>
  </macrodef>

  <!-- Delete an exploded war projects output folder -->
  <macrodef name="delete-exploded-war-macro">
    <attribute name="overlay" default="false" />
    <sequential>
      <antcall target="_delete-exploded-war-overlay=@{overlay}" />
    </sequential>
  </macrodef>

  <!-- Delete an exploded wsr projects output folder -->
  <macrodef name="delete-exploded-wsr-macro">
    <sequential>
      <delete-exploded-jar-macro />
    </sequential>
  </macrodef>

  <target name="_release-jar-type=integration" depends="_release-jar-type=developer">
    <mkdir dir="${release.repo.dir}/ail/${jar.name}/${major.version}.${minor.version}-build.${build.number}" />
    <copy file="${repo.dir}/ail/${jar.name}/${major.version}.${minor.version}/${ant.project.name}-${major.version}.${minor.version}-snapshot.dar" tofile="${release.repo.dir}/ail/${jar.name}/${major.version}.${minor.version}/${ant.project.name}-${major.version}.${minor.version}.jar" />
  </target>

  <target name="_release-jar-type=developer">
    <zip basedir="${target.dir}/${jar.name}.jar" destfile="${repo.dir}/ail/${jar.name}/${major.version}.${minor.version}/${jar.name}-${major.version}.${minor.version}-snapshot.jar" />
  </target>

  <macrodef name="release-jar-macro">
    <attribute name="jar.name" />
    <sequential>
      <antcall target="_release-jar-type=${build.type}">
        <param name="jar.name" value="@{jar.name}" />
      </antcall>
    </sequential>
  </macrodef>

  <!-- Fork a new any process with a classpath that includes all of the jars in the -->
  <!-- ${buildlib.dir} folder.                                                      -->
  <!-- @param dir Directory to execute ant in.                                      -->
  <!-- @param antfile The build file to pass to ant.                                -->
  <!-- @param target The ant target within the build file to be run.                -->
  <macrodef name="fork-ant-macro">
    <attribute name="dir" />
    <attribute name="antfile" />
    <attribute name="target" />
    <sequential>
      <java fork="yes" dir="@{dir}" classname="org.apache.tools.ant.Main">
        <arg line="-f @{antfile} @{target}" />
        <classpath>
          <fileset dir="${buildlib.dir}" includes="*.jar" />
        </classpath>
      </java>
    </sequential>
  </macrodef>
</project>
