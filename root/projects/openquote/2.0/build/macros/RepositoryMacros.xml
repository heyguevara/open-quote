<!--
 This file defines ant macros related to repository manipulations
-->

<project name="BuildRepository.xml" default="dummy" xmlns:ivy="antlib:org.apache.ivy.ant">
  <target name="dummy" />

  <macrodef name="_initialise_ivy_macro">
    <sequential>
      <path id="ivy.classpath">
        <fileset dir="${project.dir}/build/boot" includes="*.jar" />
      </path>
      <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath" />
      <ivy:settings file="/Users/richarda/Devel/2.0/openquote/build/macros/IvySettings.xml" />
    </sequential>
  </macrodef>

  <macrodef name="fetch-dependency-path-macro">
    <attribute name="org" />
    <attribute name="name" />
    <attribute name="rev" />
    <attribute name="pathid" />
    <sequential>
      <_initialise_ivy_macro/>
      <ivy:cachepath log="download-only" organisation="@{org}" module="@{name}" revision="@{rev}" inline="true" pathid="@{pathid}" />
    </sequential>
  </macrodef>
  
  <macrodef name="update-dependencies-macro">
    <attribute name="todir" />
    <sequential>
      <_set_output_dir_property_macro />
      <_initialise_ivy_macro/>
      <ivy:retrieve log="download-only" pattern="@{todir}/[artifact]-[revision](-[classifier]).[ext]"/>
    </sequential>
  </macrodef>

  <macrodef name="generate-module-descriptor-macro">
    <attribute name="path" />
	  <sequential>
        <!-- generate a new module.xml descriptor -->
	    <script language="beanshell">
	      <classpath>
	        <fileset dir="${buildlib.dir}" includes="*.jar" />
	      </classpath>
	        
	      import java.io.*;
	        
	      modulePath = new File("@{path}").getCanonicalFile().getParent();
	      moduleName = modulePath.replaceAll(".*modules/(.*)/main", "$1").replace('/', '.');
	
	      mos = new PrintStream(new FileOutputStream(modulePath+"/module.xml"));
	        
	      mos.println("&lt;module xmlns='urn:jboss:module:1.1' name='"+moduleName+"'&gt;");
	      mos.println("  &lt;resources&gt;");
	        
	      files=new File(modulePath).listFiles();
	      for(i=0 ; i!=files.length-1 ; i++) {
	          if (!files[i].getName().matches(".*(-javadoc.jar|-sources.jar|module.xml)")) {
	              mos.println("    &lt;resource-root path='"+files[i].getName()+"'/&gt;");
	          }
	      }
	        
	      mos.println("  &lt;/resources&gt;");
	      mos.println("&lt;/module&gt;");
	      mos.close();
	        
	    </script>
	</sequential>
  </macrodef>

  <macrodef name="update-module-dependencies-macro">
    <sequential>
      <_initialise_ivy_macro/>
      <_set_output_dir_property_macro/>

      <mkdir dir="${output.dir}"/>

      <!-- fetch all the dependencies to the module folder (in addition to whatever might already be there) -->
      <ivy:retrieve log="download-only"  pattern="${output.dir}/../[artifact]-[revision](-[classifier]).[ext]"/>

      <!-- (re)generate the module descriptor -->
      <generate-module-descriptor-macro path="${output.dir}/../module.xml" />
    </sequential>
  </macrodef>

</project>

