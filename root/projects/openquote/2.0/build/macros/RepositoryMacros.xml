<!--
 This file defines ant macros related to repository manipulations
-->

<project name="BuildRepository.xml" default="dummy" xmlns:ivy="antlib:org.apache.ivy.ant">
  <target name="dummy" />

  <macrodef name="_initialise_ivy_macro">
    <sequential>
      <path id="ivy.classpath">
        <fileset dir="${project.dir}/build/boot" includes="*.jar" />
      </path>
      <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath" />
      <ivy:settings file="${project.dir}/build/macros/IvySettings.xml" />
    </sequential>
  </macrodef>

  <macrodef name="fetch-dependency-path-macro">
    <attribute name="org" />
    <attribute name="name" />
    <attribute name="rev" />
    <attribute name="pathid" />
    <sequential>
      <_initialise_ivy_macro/>
      <ivy:cachepath log="download-only" organisation="@{org}" module="@{name}" revision="@{rev}" inline="true" pathid="@{pathid}" />
    </sequential>
  </macrodef>

  <macrodef name="update-dependencies-macro">
    <attribute name="todir" />
    <attribute name="pattern" default="[artifact]-[revision](-[classifier]).[ext]" />
    <sequential>
      <_set-output-dir-property-macro />
      <_initialise_ivy_macro/>
      <ivy:retrieve file="Ivy.xml" log="download-only" pattern="@{todir}/@{pattern}"/>
    </sequential>
  </macrodef>

  <macrodef name="generate-module-descriptor-macro">
    <attribute name="dependencies" default="none"/>
    <sequential>
      <_initialise_ivy_macro/>
      <_initialise-ant-contribs-macro />
      <_set-output-dir-property-macro />

      <if>
          <contains string="${output.dir}" substring=".jar" />
          <then>
            <property name="module.output.dir" value="${output.dir}/.."/>
          </then>
          <else>
            <property name="module.output.dir" value="${output.dir}/main"/>
          </else>
      </if>

      <!-- generate a new module.xml descriptor -->
      <script language="beanshell">
        <classpath>
          <fileset dir="${bootlib.dir}" includes="*.jar" />
        </classpath>
            
          import java.io.*;
        
          moduleOutputDir=project.getProperty("module.output.dir");
          modulePath = new File(moduleOutputDir).getCanonicalFile().getParent();
          moduleName = modulePath.replaceAll(".*modules.(.*)", "$1").replace(File.separator.charAt(0), '.');
          mos = new PrintStream(new FileOutputStream(moduleOutputDir+"/module.xml"));
            
          mos.println("&lt;module xmlns='urn:jboss:module:1.1' name='"+moduleName+"'&gt;");
          mos.println("  &lt;resources&gt;");
            
          files=new File(moduleOutputDir).listFiles();
          for(i=0 ; i!=files.length ; i++) {
              if (files[i].isDirectory()) {
                  if (!files[i].getName().matches(".*(-javadoc.jar|-sources.jar|module.xml|index)")) {
                      mos.println("    &lt;resource-root path='"+files[i].getName()+"'/&gt;");
                  }
              }
          }
          for(i=0 ; i!=files.length ; i++) {
              if (files[i].isFile()) {
                  if (!files[i].getName().matches(".*(-javadoc.jar|-sources.jar|module.xml|index)")) {
                      mos.println("    &lt;resource-root path='"+files[i].getName()+"'/&gt;");
                  }
              }
          }
            
          mos.println("  &lt;/resources&gt;");

          if (!"@{dependencies}".equals("none")) {
            deps="@{dependencies}".split("[,\\s]+");

              mos.println("  &lt;dependencies&gt;");

              for(int i=0 ; i!=deps.length ; i++) {
                mos.println("    &lt;module name='"+deps[i]+"'/&gt;");
              }
              mos.println("  &lt;/dependencies&gt;");
          }

          mos.println("&lt;/module&gt;");
          mos.close();
            
        </script>
    </sequential>
  </macrodef>

  <macrodef name="update-module-dependencies-macro">
    <sequential>
      <_initialise_ivy_macro/>
      <_initialise-ant-contribs-macro />
      <_set-output-dir-property-macro/>

      <mkdir dir="${output.dir}"/>

      <!-- There are two "styles" of module source folder. Ones (like core.jar) into which -->
      <!-- we are building our code, and those (like modules/org/drools) where we are just -->
      <!-- packaging up 3rd party jars. We need to differentiate between them here, so we  -->
      <!-- will do so based on the project's name ending with a .jar or not.               -->
      <if>
          <contains string="${output.dir}" substring=".jar" />
          <then>
            <property name="module.output.dir" value="${output.dir}/.."/>
          </then>
          <else>
            <property name="module.output.dir" value="${output.dir}/main"/>
          </else>
      </if>
      
      <!-- fetch all the dependencies to the module folder (in addition to whatever might already be there) -->
      <ivy:retrieve file="Ivy.xml" log="download-only" pattern="${module.output.dir}/[artifact]-[revision](-[classifier]).[ext]"/>

      <!-- (re)generate the module descriptor -->
      <generate-module-descriptor-macro />
    </sequential>
  </macrodef>

</project>

