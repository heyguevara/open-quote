<?xml version="1.0" encoding="UTF-8"?>
<!--
 This file defines the default (factory) configuration for the Core. This
 configuration is used by the core's resetConfiguration() method.
 $Revision: 1.19 $
 $State: Exp $
 $Date: 2007/10/05 22:47:50 $
 $Source: /home/bob/CVSRepository/projects/core/core.ear/core.jar/com/ail/core/CoreDefaultConfig.xml,v $
-->
<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.appliedindustriallogic.com/schemas/Configuration.xsd">
  <name>Default Core Configuration</name>
  <timeout>6000</timeout>
  <who>factory</who>
  <version>$Revision: 1.19 $</version>  

  <!-- Reset the following namespaces when a "reset all" request is made. -->
  <!-- Note: com.ail.core.Core is implicitly included.                    -->
  <group name="NamespacesToResetOnResetAll">
    <parameter name="com.ail.core.CoreProxy"/>
    <parameter name="com.ail.core.configure.server.ServerBean"/>
    <parameter name="com.ail.core.validator.CommonsValidatorService"/>
    <parameter name="com.ail.core.product.ProductManagerBean"/>
    <parameter name="com.ail.core.persistence.PersistenceServerBean"/>
    <parameter name="com.ail.core.command.CommandServerBean"/>
    <parameter name="com.ail.core.key.GenerateUniqueNumberService"/>
    <parameter name="com.ail.core.product.listproducts.ListProductsService"/>
    <parameter name="com.ail.core.product.resetallproducts.ResetAllProductsService"/>
  </group>
  
  <!-- Define the functions to be made available to JXPath. The name of each -->
  <!-- parameter becomes the namespace and the value is the class which      -->
  <!-- implements the functions.                                             -->
  <group name="JXPathExtensions">
    <parameter name="function">com.ail.core.Functions</parameter>
  </group>
  
  <builders>
    <builder name="ClassBuilder" factory="com.ail.core.factory.ClassFactory"/>
    <builder name="CachingClassBuilder" factory="com.ail.core.factory.CachingClassFactory"/>
    <builder name="BeanShellBuilder" factory="com.ail.core.factory.BeanShellFactory"/>
    <builder name="CastorXMLBuilder" factory="com.ail.core.factory.CastorXMLFactory"/>
    <builder name="XSLTBuilder" factory="com.ail.core.factory.XSLTFactory"/>
  </builders>

  <types>
    <!--====================================-->
    <!--   Define the default core services -->
    <!--====================================-->

    <!-- NullService: This service does nothing, it can be used to stub commands -->
    <service name="NullService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.NullService</parameter>
    </service>

    <!-- ToXMLService: Convert an object graph into and XMLString -->
    <service name="ToXMLService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.xmlbinding.CastorToXMLService</parameter>
    </service>

    <!-- FromXMLService: Convert an XMLString into an object graph -->
    <service name="FromXMLService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.xmlbinding.CastorFromXMLService</parameter>
    </service>

    <!-- LoggingService: Writes logging messages to System.out -->
    <service name="LoggingService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.logging.SystemOutLoggerService</parameter>
    </service>

    <!-- ValidatorService: Validation -->
    <service name="ValidatorService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.validator.CommonsValidatorService</parameter>
    </service>

    <!-- GetClassListService: GetClassList -->
    <service name="GetClassListService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.configure.finder.GetClassListService</parameter>
    </service>

    <!-- GetNamespaceService: get a list of the namespaces know to the configure system -->
    <service name="GetNamespacesService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.configure.server.GetNamespacesService</parameter>
      <parameter name="LoggingIndicatorAsString">CALL</parameter>
    </service>
    
    <!-- GetConfigurationService: get a named configuration -->
    <service name="GetConfigurationService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.configure.server.GetConfigurationService</parameter>
      <parameter name="LoggingIndicatorAsString">CALL</parameter>
    </service>
    
    <!-- SetConfigurationService: save a named configuration -->
    <service name="SetConfigurationService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.configure.server.SetConfigurationService</parameter>
      <parameter name="LoggingIndicatorAsString">CALL</parameter>
    </service>
    
    <!-- GetConfigurationHistoryService: fetch a namesapce's history -->
    <service name="GetNamespacesHistoryService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.configure.server.GetNamespacesHistoryService</parameter>
    </service>
    
    <!-- PackageCarService: Service to build and return an Configuration ARchive -->
    <service name="PackageCarService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.configure.server.PackageCarService</parameter>
    </service>
    
    <!-- DeployCarService: Service which reads configurations from a Configuration ARchive and deploys them -->
    <service name="DeployCarService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.configure.server.DeployCarService</parameter>
    </service>

    <!-- CatalogCarService: Parse a Configuration ARchive and return a list of the configurations found in it. -->
    <service name="CatalogCarService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.configure.server.CatalogCarService</parameter>
    </service>

    <!-- UniqueNumberService: Return a unique number. -->
    <service name="GenerateUniqueKeyService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.key.GenerateUniqueKeyService</parameter>
    </service>

    <!-- Product services -->
    <service name="ListProductsService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.product.listproducts.ListProductsService</parameter>
    </service>

    <service name="NewProductTypeService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.product.newproducttype.NewProductTypeService</parameter>
    </service>

    <service name="ResetAllProductsService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.product.resetallproducts.ResetAllProductsService</parameter>
    </service>

    <service name="ResetProductService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.product.resetproduct.ResetProductService</parameter>
    </service>
    
    <service name="RegisterProductService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.product.registerproduct.RegisterProductService</parameter>
    </service>
    
    <service name="RemoveProductService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.product.removeproduct.RemoveProductService</parameter>
    </service>
    
    <service name="UpdateProductService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.product.updateproduct.UpdateProductService</parameter>
    </service>
    
    <!-- Hibernate services -->
    <service name="HibernateOpenSessionService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.persistence.hibernate.HibernateOpenSessionService</parameter>
    </service>

    <service name="HibernateCloseSessionService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.persistence.hibernate.HibernateCloseSessionService</parameter>
    </service>
    
    <service name="HibernateUpdateService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.persistence.hibernate.HibernateUpdateService</parameter>
    </service>
    
    <service name="HibernateQueryService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.persistence.hibernate.HibernateQueryService</parameter>
    </service>

    <service name="HibernateLoadService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.persistence.hibernate.HibernateLoadService</parameter>
    </service>

    <service name="HibernateCreateService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.persistence.hibernate.HibernateCreateService</parameter>
    </service>
    
    <service name="HibernateDeleteService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.persistence.hibernate.HibernateDeleteService</parameter>
    </service>
    
    <!-- Document services -->
    <service name="GenerateDocumentService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.document.generatedocument.GenerateDocumentService</parameter>
    </service>
          
    <service name="MergeDocumentDataService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.document.generatedocument.JavaMergeDataService</parameter>
    </service>
    
    <service name="StyleDocumentService" builder="ClassBuilder" key="com.ail.core.command.XSLTAccessor">
      <parameter name="Url">classpath://com.ail.core.document.generatedocument/DefaultStyleDocumentService.xslt</parameter>
    </service>
    
    <service name="RenderPdfDocumentService" builder="ClassBuilder" key="com.ail.core.command.ClassAccessor">
      <parameter name="ServiceClass">com.ail.core.document.generatedocument.RenderPdfDocumentService</parameter>
    </service>
      
    <!--=======================================================================-->
    <!-- Bind the default core services (above) to Commands used by Core.class -->
    <!--=======================================================================-->

    <command name="ToXML" builder="ClassBuilder" key="com.ail.core.xmlbinding.ToXMLCommand">
      <parameter name="Service">ToXMLService</parameter>
    </command>

    <command name="FromXML" builder="ClassBuilder" key="com.ail.core.xmlbinding.FromXMLCommand">
      <parameter name="Service">FromXMLService</parameter>
    </command>

    <command name="InfoLogger" builder="ClassBuilder" key="com.ail.core.logging.LoggerCommand">
      <parameter name="Service">LoggingService</parameter>
    </command>

    <command name="DebugLogger" builder="ClassBuilder" key="com.ail.core.logging.LoggerCommand">
      <parameter name="Service">LoggingService</parameter>
    </command>

    <command name="WarningLogger" builder="ClassBuilder" key="com.ail.core.logging.LoggerCommand">
      <parameter name="Service">LoggingService</parameter>
    </command>

    <command name="ErrorLogger" builder="ClassBuilder" key="com.ail.core.logging.LoggerCommand">
      <parameter name="Service">LoggingService</parameter>
    </command>

    <command name="FatalLogger" builder="ClassBuilder" key="com.ail.core.logging.LoggerCommand">
      <parameter name="Service">LoggingService</parameter>
    </command>

    <command name="Validator" builder="ClassBuilder" key="com.ail.core.validator.ValidatorCommand">
      <parameter name="Service">ValidatorService</parameter>
    </command>

    <command name="GetClassList" builder="ClassBuilder" key="com.ail.core.configure.finder.GetClassListCommand">
      <parameter name="Service">GetClassListService</parameter>
    </command>

    <command name="GetNamespaces" builder="ClassBuilder" key="com.ail.core.configure.server.GetNamespacesCommand">
      <parameter name="Service">GetNamespacesService</parameter>
    </command>

    <command name="GetConfiguration" builder="ClassBuilder" key="com.ail.core.configure.server.GetConfigurationCommand">
      <parameter name="Service">GetConfigurationService</parameter>
    </command>
      
    <command name="SetConfiguration" builder="ClassBuilder" key="com.ail.core.configure.server.SetConfigurationCommand">
      <parameter name="Service">SetConfigurationService</parameter>
    </command>
      
    <command name="GetNamespacesHistory" builder="ClassBuilder" key="com.ail.core.configure.server.GetNamespacesHistoryCommand">
      <parameter name="Service">GetNamespacesHistoryService</parameter>
    </command>

    <command name="PackageCar" builder="ClassBuilder" key="com.ail.core.configure.server.PackageCarCommand">
      <parameter name="Service">PackageCarService</parameter>
    </command>

    <command name="DeployCar" builder="ClassBuilder" key="com.ail.core.configure.server.DeployCarCommand">
      <parameter name="Service">DeployCarService</parameter>
    </command>

    <command name="CatalogCar" builder="ClassBuilder" key="com.ail.core.configure.server.CatalogCarCommand">
      <parameter name="Service">CatalogCarService</parameter>
    </command>
    
    <command name="GenerateUniqueKey" builder="ClassBuilder" key="com.ail.core.key.GenerateUniqueKeyCommand">
      <parameter name="Service">GenerateUniqueKeyService</parameter>
    </command>

    <command name="ListProducts" builder="ClassBuilder" key="com.ail.core.product.listproducts.ListProductsCommand">
      <parameter name="Service">ListProductsService</parameter>
    </command>

    <command name="NewProductType" builder="ClassBuilder" key="com.ail.core.product.newproducttype.NewProductTypeCommand">
      <parameter name="Service">NewProductTypeService</parameter>
    </command>

    <command name="ResetProduct" builder="ClassBuilder" key="com.ail.core.product.resetproduct.ResetProductCommand">
      <parameter name="Service">ResetProductService</parameter>
    </command>

    <command name="ResetAllProducts" builder="ClassBuilder" key="com.ail.core.product.resetallproducts.ResetAllProductsCommand">
      <parameter name="Service">ResetAllProductsService</parameter>
    </command>

    <command name="RegisterProduct" builder="ClassBuilder" key="com.ail.core.product.registerproduct.RegisterProductCommand">
      <parameter name="Service">RegisterProductService</parameter>
    </command>

    <command name="RemoveProduct" builder="ClassBuilder" key="com.ail.core.product.removeproduct.RemoveProductCommand">
      <parameter name="Service">RemoveProductService</parameter>
    </command>

    <command name="UpdateProduct" builder="ClassBuilder" key="com.ail.core.product.updateproduct.UpdateProductCommand">
      <parameter name="Service">UpdateProductService</parameter>
    </command>

    <command name="OpenPersistenceSession" builder="ClassBuilder" key="com.ail.core.persistence.OpenSessionCommand">
      <parameter name="Service">HibernateOpenSessionService</parameter>
    </command>
    
    <command name="ClosePersistenceSession" builder="ClassBuilder" key="com.ail.core.persistence.CloseSessionCommand">
      <parameter name="Service">HibernateCloseSessionService</parameter>
    </command>
    
    <command name="Update" builder="ClassBuilder" key="com.ail.core.persistence.UpdateCommand">
      <parameter name="Service">HibernateUpdateService</parameter>
    </command>

    <command name="Query" builder="ClassBuilder" key="com.ail.core.persistence.QueryCommand">
      <parameter name="Service">HibernateQueryService</parameter>
    </command>

    <command name="Load" builder="ClassBuilder" key="com.ail.core.persistence.LoadCommand">
      <parameter name="Service">HibernateLoadService</parameter>
    </command>
    
    <command name="Create" builder="ClassBuilder" key="com.ail.core.persistence.CreateCommand">
      <parameter name="Service">HibernateCreateService</parameter>
    </command>

    <command name="Delete" builder="ClassBuilder" key="com.ail.core.persistence.DeleteCommand">
      <parameter name="Service">HibernateDeleteService</parameter>
    </command>
    
    <command name="GenerateDocument" builder="ClassBuilder" key="com.ail.core.document.generatedocument.GenerateDocumentCommand">
      <parameter name="Service">GenerateDocumentService</parameter>
    </command>
          
    <command name="MergeDocumentDataCommand" builder="ClassBuilder" key="com.ail.core.document.generatedocument.MergeDataCommand">
      <parameter name="Service">MergeDocumentDataService</parameter>
    </command>
    
    <command name="StyleDocumentCommand" builder="ClassBuilder" key="com.ail.core.document.generatedocument.StyleDocumentCommand">
      <parameter name="Service">StyleDocumentService</parameter>
    </command>
          
    <type name="Version" builder="ClassBuilder" key="com.ail.core.Version"/>
    <type name="History" builder="ClassBuilder" key="com.ail.core.History"/>
  </types>
</configuration>
