<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 Macro file defining a collection of ant macros concerned with managing JBoss
-->

<project default="dummy" name="BuildJBossMacros.xml">

  <target name="dummy" />

  <target name="_install.jboss" unless="jbosspresent">
    <!-- Get the jboss zip into the cache -->
    <repo-get-macro repo="75.101.150.249/repo" group="jboss" artifact="jboss-ail" version="${version}" type="zip" />

    <!-- Unpack the cached zip into the dev tree -->
    <mkdir dir="${target.dir}" />
    <unzip overwrite="yes" dest="${target.dir}" src="${repo.dir}/jboss/jboss-ail/${version}/jboss-ail-${version}.zip" />
    <exec os="Linux,Mac OS X,Solaris,Sun OS" executable="sh" dir="${target.dir}/jboss/bin">
      <arg line="-c 'chmod 755 *.sh'" />
    </exec>
  </target>

  <!-- Macro to install jboss in a development tree.   -->
  <!-- @param version The version of jboss to install. -->
  <macrodef name="install-jboss-macro">
    <attribute name="version" />
    <sequential>
      <available file="${jboss.dir}/bin/run.sh" property="jbosspresent" />
      <antcall target="_install.jboss">
        <param name="version" value="@{version}" />
      </antcall>
    </sequential>
  </macrodef>

  <!-- Macro to uninstall jboss in a development tree.   -->
  <!-- @param version The version of jboss to uninstall. -->
  <macrodef name="uninstall-jboss-macro">
    <attribute name="version" />
    <sequential>
      <!-- Delete the installed tree -->
      <delete dir="${jboss.dir}" failonerror="no" />
    </sequential>
  </macrodef>

  <target name="_start-jboss-if-jboss-running=false" unless="jboss-running">
    <exec dir="${jboss.dir}/bin" executable="${jboss.dir}/bin/run.sh" os="Linux,Mac OS X,Solaris,Sun OS">
      <env key="DEBUG_OPTS" value="-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n" />
    </exec>
    <exec dir="${jboss.dir}/bin" executable="${jboss.dir}/bin/run.bat" os="Windows 2000,Windows XP,Windows 7">
      <env key="DEBUG_OPTS" value="-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n" />
    </exec>
  </target>

  <target name="_start-jboss-if-jboss-running=true" if="jboss-running">
    <echo level="info" message="JBoss can't start jboss, it is already running!" />
  </target>

  <!-- Macro to start the jboss server if it isn't running already. -->
  <macrodef name="start-jboss-macro">
    <sequential>
      <set-jboss-running-property-macro />
      <antcall target="_start-jboss-if-jboss-running=true" />
      <antcall target="_start-jboss-if-jboss-running=false" />
    </sequential>
  </macrodef>

  <target name="_stop-jboss-if-jboss-running=true" if="jboss-running">
    <java jar="${jboss.dir}/bin/shutdown.jar" fork="yes" dir="${project.dir}">
      <arg value="-S" />
    </java>
  </target>

  <target name="_stop-jboss-if-jboss-running=false" unless="jboss-running">
    <echo level="info" message="Jboss can't be stopped - it isn't running!" />
  </target>

  <!-- Macro to stop jboss if it is running. -->
  <macrodef name="stop-jboss-macro">
    <sequential>
      <set-jboss-running-property-macro />
      <antcall target="_stop-jboss-if-jboss-running=true" />
      <antcall target="_stop-jboss-if-jboss-running=false" />
    </sequential>
  </macrodef>

  <target name="_kick-jboss-if-jboss-running=true" if="jboss-running">
    <!-- touch the application.xml to force jboss to scan -->
    <touch file="${ear.dir}/META-INF/application.xml" />

    <taskdef name="jmx" classname="org.jboss.ant.JMX">
      <classpath>
        <fileset dir="${jboss.dir}/client" includes="*.jar" />
      </classpath>
    </taskdef>

    <!-- tell jboss to take a look -->
    <jmx adapterName="jmx/rmi/RMIAdaptor" serverURL="jnp://localhost:1099">
      <invoke target="jboss.deployment:flavor=URL,type=DeploymentScanner" operation="scan" />
    </jmx>
  </target>

  <target name="_kick-jboss-if-jboss-running=false" unless="jboss-running">
    <echo level="info" message="Doesn't look like jboss is running, so I can't kick the server" />
  </target>

  <!-- Macro to force jboss to rescan the deployment directory and takeup any changes. -->
  <!-- In our dev environment jboss is configured _not_ to automatically scan for      -->
  <!-- changes in it's deploy directory. So we have to tell it to scan, which is       -->
  <!-- what this macro does.                                                           -->
  <!-- You might ask why we do it this way? Well, because we're building into an       -->
  <!-- exploded ear file, a build  is likely to be altering class files, descriptors   -->
  <!-- individually. If JBoss is left to it's default behaviour it might scan part     -->
  <!-- way through a build and only pick up part of the picture.                       -->
  <macrodef name="kick-jboss-macro">
    <sequential>
      <set-jboss-running-property-macro />
      <antcall target="_kick-jboss-if-jboss-running=true" />
      <antcall target="_kick-jboss-if-jboss-running=false" />
    </sequential>
  </macrodef>

  <!-- Under an integration build we upload the results of the relese to the project wide repository -->
  <target name="_release-jboss-domain-type=integration" depends="_release-jboss-domain-type=developer">
    <mkdir dir="${release.repo.dir}/ail/${ant.project.name}/${major.version}.${minor.version}-build.${build.number}" />
    <copy file="${repo.dir}/ail/${ant.project.name}/${major.version}.${minor.version}/${ant.project.name}-${major.version}.${minor.version}-snapshot.dar" tofile="${release.repo.dir}/ail/${ant.project.name}/${major.version}.${minor.version}-build.${build.number}/${ant.project.name}-${major.version}.${minor.version}-build.${build.number}.dar" />
  </target>

  <!-- For a local 'developer' build, we simply put a SNAPSHOT copy of the .dar in the local cache dir for other projects to use -->
  <target name="_release-jboss-domain-type=developer">
    <mkdir dir="${repo.dir}/ail/${ant.project.name}/${major.version}.${minor.version}" />
    <zip basedir="${deploy.dir}" destfile="${repo.dir}/ail/${ant.project.name}/${major.version}.${minor.version}/${ant.project.name}-${major.version}.${minor.version}-snapshot.dar" />
  </target>

  <!-- Macro to "release" the current project's jboss domain. -->
  <macrodef name="release-jboss-domain-macro">
    <sequential>
      <antcall target="_release-jboss-domain-type=${build.type}" />
    </sequential>
  </macrodef>

  <!-- Macro which sets the ${jboss-running} to true if jboss is running -->
  <macrodef name="set-jboss-running-property-macro">
    <sequential>
      <condition property="jboss-running">
        <and>
          <socket server="localhost" port="8080" />
          <socket server="localhost" port="1099" />
        </and>
      </condition>
    </sequential>
  </macrodef>

  <target name="_reset-portal-if-jboss-running=false" unless="jboss-running">
    <!-- Portal keeps all its settings in a hypersonc database. The server will recreate -->
    <!-- it on startup, so "resetting" is simply a case of deleting the database.        -->
    <delete dir="${jboss.dir}/server/default/data/portal" failonerror="no" />
  </target>

  <target name="_reset-portal-if-jboss-running=true" if="jboss-running">
    <echo message="The portal cannot be reset while jboss is running." />
  </target>

  <macrodef name="reset-portal-macro">
    <sequential>
      <set-jboss-running-property-macro />
      <antcall target="_reset-portal-if-jboss-running=true" />
      <antcall target="_reset-portal-if-jboss-running=false" />
    </sequential>
  </macrodef>

  <macrodef name="configuration-macro">
    <attribute name="username" />
    <attribute name="password" />
    <attribute name="operation" />
    <attribute name="factory" default="${java.naming.factory.initial}" />
    <attribute name="provider" default="${java.naming.provider.url}" />
    <sequential>

      <java fork="yes" classname="com.ail.core.configure.ConfigurationAntTasks">
        <classpath>
          <dirset dir="${ear.lib}" includes="core.jar" />
          <fileset dir="${ear.lib}" includes="*.jar" />
          <dirset dir="${ear.dir}" includes="*.jar" />
          <dirset dir="${ear.dir}" includes="*.war/WEB-INF/classes" />
          <fileset dir="${jboss.dir}" includes="lib/endorsed/xercesImpl.jar" />
          <fileset dir="${jboss.dir}" includes="client/jbossall-client.jar" />
        </classpath>
        <arg value="username=@{username}" />
        <arg value="password=@{password}" />
        <arg value="operation=@{operation}" />
        <arg value="provider=@{provider}" />
        <arg value="factory=@{factory}" />
      </java>
    </sequential>
  </macrodef>

  <!-- Macro to "compile" content in alfresco's bootstrap content folder.                          -->
  <!-- When Alfresco is first started (i.e. starts and finds it's repository empty), it creates a  -->
  <!-- "bootstarp" repostory from the exported content archives it finds under WEB-INF. This macro -->
  <!-- creates archives in that location.                                                          -->
  <macrodef name="build-bootstrap-content-macro">
    <attribute name="basedir" />
    <sequential>
      <property name="restore.dir" value="${deploy.dir}/deploy/alfresco.war/WEB-INF/classes/alfresco/extension/restore" />
      <mkdir dir="${restore.dir}" />
      <copy file="export_systeminfo.xml" todir="${restore.dir}" />
      <copy file="restore-context.xml" todir="${restore.dir}/.." />
      <zip basedir="@{basedir}" destfile="${restore.dir}/@{basedir}" />
    </sequential>
  </macrodef>

  <!-- The aim here is to download an alresco "whole repository" export, and put it into the alfresco war -->
  <!-- in the correct place such that alfresco will us it as "boot content", and so populate it's repo    -->
  <!-- from it at boot time.                                                                              -->
  <!-- The process goes like this:                                                                        -->
  <!-- 1) Manually login to alfreso as admin, and create a whole-repository export called "export", and   -->
  <!--    write the export to the "Guest User" space.                                                     -->
  <!-- 2) Run this macro to pull the export files into your build tree. Commit the changes to SVN.        -->
  <macrodef name="content-download-export-macro">
    <sequential>
      <property name="export.src.base.url" value="http://localhost:8080/alfresco/download/direct?path=/Company%20Home/Guest%20Home" />
      <property name="export.dst.base.dir" value="domain/jboss/deploy/alfresco.war/WEB-INF/classes/alfresco/extension/restore" />

      <!-- Download the export - i.e. download the systeminfo file and the .acp files    -->
      <!-- Note: We're not interested in the spaces_archive from alfresco, it holds      -->
      <!-- deleted or old versions of artifacts - in the source tree SVN performs that   -->
      <!-- function, so we can ignore it.                                                -->
      <get src="${export.src.base.url}/export_systeminfo.xml" dest="${export.dst.base.dir}/export_systeminfo.xml" />
      <get src="${export.src.base.url}/export_models.acp" dest="${export.dst.base.dir}/export_models.acp" />
      <get src="${export.src.base.url}/export_spaces.acp" dest="${export.dst.base.dir}/export_spaces.acp" />
      <get src="${export.src.base.url}/export_users.acp" dest="${export.dst.base.dir}/export_users.acp" />
      <get src="${export.src.base.url}/export_system.acp" dest="${export.dst.base.dir}/export_system.acp" />
      <get src="${export.src.base.url}/export_versions.acp" dest="${export.dst.base.dir}/export_versions.acp" />
    </sequential>
  </macrodef>

  <target name="_mount-product-space-properties">
    <property name="unix.mountpoint" value="../openquote-product" />
  </target>

  <target name="_mount-product-space-Mac OS X" depends="_mount-product-space-properties">
    <mkdir dir="${unix.mountpoint}" />
    <exec os="Mac OS X" executable="mount_smbfs" failonerror="yes">
      <arg value="//admin:admin@localhost:1445/Alfresco/Product" />
      <arg value="${unix.mountpoint}" />
    </exec>
    <echo message="Product space mounted on ${unix.mountpoint}" />
  </target>

  <target name="_unmount-product-space-Mac OS X" depends="_mount-product-space-properties">
    <exec os="Mac OS X" executable="umount" failonerror="yes">
      <arg value="${unix.mountpoint}" />
    </exec>
    <delete dir="${unix.mountpoint}" />
    <echo message="Product space unmounted from ${unix.mountpoint}" />
  </target>

  <macrodef name="mount-product-space-macro">
    <sequential>
      <antcall target="_mount-product-space-${os.name}" />
    </sequential>
  </macrodef>

  <macrodef name="unmount-product-space-macro">
    <sequential>
      <antcall target="_unmount-product-space-${os.name}" />
    </sequential>
  </macrodef>
</project>