<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is the 'Base' product used in testing the insurance product
-->
<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
               xsi:noNamespaceSchemaLocation="http://www.appliedindustriallogic.com/schemas/Configuration.xsd">
    <name>Configuration for the Base product</name>
    <timeout>60000</timeout>
    <who>factory</who>
    <version>1.0</version>
    <manager>com.ail.core.product.resetproduct.ResetProductService</manager>
    
    <!-- Select the method used to generate new numbers. Options are:                            -->
    <!--  ConfigurePropertyUniqueNumberHandler - which stores the numbers in configuration.       -->
    <!--  PolicyIdUniqueNumberGeneratorHandler - use the policy's unique ID as the quote number. -->
    <parameter name="UniqueQuotationNumberHandler">ConfigurePropertyUniqueNumberHandler</parameter>

    <!-- Next (unique) Number to use in a number generation scheme. The service -->
    <!-- updates this parameter as numbers are used up.                         -->
    <parameter name="PolicyNumberNextNumber">1000</parameter>
    <parameter name="QuoteNumberNextNumber">1000</parameter>
    
    <!-- To avoid hitting the database every time a number is generated,        -->
    <!-- the service takes a chunk of numbers at a time, keeps track of the     -->
    <!-- ones it uses, then comes back for more when it runs out. BlockSize     -->
    <!-- controls the number that are allocated on each call.                   -->
    <parameter name="PolicyNumberBlockSize">100</parameter>
    <parameter name="QuoteNumberBlockSize">100</parameter>

    <types>
        <service name="PolicyRule" builder="ClassBuilder" key="com.ail.core.command.BeanShellAccessor" >
            <parameter name="Script"><![CDATA[
import com.ail.financial.CurrencyAmount;
import com.ail.financial.Currency;
import com.ail.insurance.policy.*;

/* get hold of the as */
as=args.getAssessmentSheetArgRet();

/* add a 'flag' - just to show that this rule has been run */
line=new FixedSum();
line.setId("flag");
line.setAmount(new CurrencyAmount(0.0, Currency.GBP));
as.addLine(line);
                ]]></parameter>
        </service>
        
        <service name="GeneratePolicyNumberService" builder="ClassBuilder" key="com.ail.core.command.BeanShellAccessor">
            <parameter name="Script"><![CDATA[
args.setPolicyNumberRet("POL"+args.getUniqueNumberArg());
             ]]></parameter>
        </service>
        
        <service name="GenerateQuoteNumberService" builder="ClassBuilder" key="com.ail.core.command.BeanShellAccessor">
            <parameter name="Script"><![CDATA[
args.setQuoteNumberRet("QF"+args.getUniqueNumberArg());
         ]]></parameter>
        </service>

        <!-- Risk assessment rules (command & service) for all products unless they override -->
        <command name="AssessPolicyRisk" builder="ClassBuilder" key="com.ail.insurance.quotation.AssessPolicyRiskCommandImpl">
            <parameter name="Service">PolicyRule</parameter>
        </command>

        <!-- Tax calc rules (command & service) for this product. By default, no taxes are applied -->
        <command name="CalculatePolicyTax" builder="ClassBuilder" key="com.ail.insurance.quotation.CalculatePolicyTaxCommandImpl">
            <parameter name="Service">com.ail.core.NullService</parameter>
        </command>
        
        <!-- Commission calc rules (command & service) for this product. By default, no commissions are applied -->
        <command name="CalculatePolicyCommission" builder="ClassBuilder" key="com.ail.insurance.quotation.CalculatePolicyCommissionCommandImpl">
            <parameter name="Service">com.ail.core.NullService</parameter>
        </command>

        <!-- Brokerage calc rules (command & service) for this product. By default, no brokerage is applied -->
        <command name="CalculatePolicyBrokerage" builder="ClassBuilder" key="com.ail.insurance.quotation.CalculatePolicyBrokerageCommandImpl">
            <parameter name="Service">com.ail.core.NullService</parameter>
        </command>
        
        <!-- Management charge rules (command & service) for this product. By default, no charges are applied -->
        <command name="CalculatePolicyManagementCharge" builder="ClassBuilder" key="com.ail.insurance.quotation.CalculatePolicyManagementChargeCommandImpl">
            <parameter name="Service">com.ail.core.NullService</parameter>
        </command>

        <!-- Generate policy number default command & service. -->
        <command name="GeneratePolicyNumber" builder="ClassBuilder" key="com.ail.insurance.quotation.GeneratePolicyNumberCommandImpl">
            <parameter name="Service">GeneratePolicyNumberService</parameter>
        </command>
        <!-- Generate quote number default command & service. -->
        <command name="GenerateQuoteNumber" builder="ClassBuilder" key="com.ail.insurance.quotation.GenerateQuoteNumberCommandImpl">
            <parameter name="Service">GenerateQuoteNumberService</parameter>
        </command>

        <!-- Enforce compliance rules (command & service). By default, no rules are applied -->
        <command name="EnforcePolicyCompliance" builder="ClassBuilder" key="com.ail.insurance.quotation.EnforcePolicyComplianceCommandImpl">
            <parameter name="Service">com.ail.core.NullService</parameter>
        </command>        
    </types>
</configuration>
