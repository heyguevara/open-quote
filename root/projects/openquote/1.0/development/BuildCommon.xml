<!--
 This file defines the common section used in all build files
 Ant build file for the core project.
 $Revision: 1.41 $
 $State: Exp $
 $Date: 2007/11/23 20:59:04 $
 $Source: /home/bob/CVSRepository/development/BuildCommon.xml,v $
-->

<project name="BuildCommon.xml" default="dummy">
  <!-- set global properties for this build -->
  <property environment="env" />
  <property name="cache.dir" value="${development.dir}/cache" />
  <property name="domain.dir" value="${basedir}/domain/jboss" />
  <property name="lib" value="${basedir}/jars" />
  <property name="tmp" value="${build.dir}/tmp" />
  <property name="build.number.file" value="${basedir}/Build.number" />
  <property name="list" value="" />
  <property name="keystore" value="${basedir}/../development/data/keystore" />
  <property name="copyfilter.dir" value="${ear.dir}/lib" />
  <property name="copyfilter.file" value="${copyfilter.dir}/filter" />
  <property name="serverBaseUrl" value="localhost:8080" />
  <property name="java.naming.factory.initial" value="org.jnp.interfaces.NamingContextFactory" />
  <property name="java.naming.provider.url" value="jnp://localhost:1099" />
  <property name="grinder.properties" value="${basedir}/grinder.properties" />
  <property name="connectionpoolloader.params" value="jndiname=java:/ConfigureDS;table=config" />
  <!-- details for the Project Library (where 3rd party jars are held etc). -->
  <property name="ftp.server" value="gus" />
  <property name="ftp.user" value="developer" />
  <property name="ftp.dir" value="/home/bob/ProjectLib" />
  <property name="ftp.password" value="greenpea" />
  <property name="build.sysclasspath" value="last"/>
  <!-- default build.type is developer, cruisecontrol overrides this with a -D on the command line -->
  <property name="build.type" value="developer"/> 
  
  <target name="dummy" />

  <!-- Convert the named property from a windows style path to unix style -->
  <!-- e.g. "c:\my\folder\file.txt" -> "c:/my/folder/file.txt"            -->   
  <macrodef name="unixify-path-macro">
    <attribute name="property"/>
    <sequential>
      <script language="beanshell">
        val=project.getProperty("@{property}");
        project.setProperty("@{property}", val.replaceAll("\\\\","/"));
      </script>   
    </sequential>
  </macrodef>   

  <!-- The if-macro sets the named property to "true" if the specified condition evaluates to true. The -->
  <!-- property is "forced" to change breaking ant's normal immutable property rule.                    -->
  <scriptdef name="if-macro" language="beanshell">
    <attribute name="property"/>
    <attribute name="condition"/>
    <attribute name="arg1"/>
    <attribute name="arg2"/>
        property=attributes.get("property");
        condition=attributes.get("condition"); 
        arg1=attributes.get("arg1");
        arg1=arg1.replaceAll("\\\\","/");
        arg2=attributes.get("arg2");
    
        project.setProperty(property,"false");

        if (condition.equals("equals")) {
          if (arg1.equals(arg2)) {
	          project.setProperty(property,"true");
          }
        }
        else if (condition.equals("exists")) {
          if (new File(arg1).exists()) {
            project.setProperty(property,"true");
          }
        }
        else if (condition.equals("defined")) {
          if (arg1.length()!=0) {
            project.setProperty(property,"true");
          }
        }
        else {
          print("Condition "+condition+" is not understood");
          throw new Exception("Condition "+condition+" is not understood");
        }
  </scriptdef>
  
  <!-- Run a specified target in all the ant files one level down in the directory structure -->
  <macrodef name="subant-macro">
    <attribute name="target" />
    <attribute name="excludes" default="classes/**"/>
    <attribute name="includes" default="*/Build.xml"/>
    <sequential>
      <subant target="@{target}" failonerror="yes">
        <fileset dir="." includes="@{includes}" excludes="@{excludes}" />
      </subant>
    </sequential>
  </macrodef>

  <target name="ftp.repository.file.into.cache.if" unless="noftpserver">
    <mkdir dir="${cache.dir}" />
    <ftp action="get" userid="${ftp.user}" password="${ftp.password}" remotedir="${ftp.dir}" server="${ftp.server}" verbose="yes" newer="yes" passive="yes">
      <fileset dir="${cache.dir}" includes="${name}" />
    </ftp>
  </target>

  <target name="no.ftp.server.warning" if="noftpserver">
    <echo level="warning" message="FTP server isn't visible. Relying on cached files." />
  </target>

  <!-- Copy a cached file into another directory -->
  <target name="copy.cached.file.to.dest.docopy=true">
    <copy file="${cache.dir}/${name}" todir="${dir}" />
  </target>
  <target name="copy.cached.file.to.dest.docopy=false"/>

  <!-- Fetch a named file from the repository, using a local cache to speed up future gets.  -->
  <!-- If the 'dir' attribute isn't specified, the file is just copied into the local cache. -->
  <!-- @param name The name of the file to copy.                                             -->
  <!-- @param dir The directory to copy the file to.                                         -->
  <macrodef name="get-repository-file">
    <attribute name="name" />
    <attribute name="dir" default="" />
    <sequential>

      <!-- This will copy the remote file into the local cache if it can see the repository -->
      <antcall target="ftp.repository.file.into.cache.if">
        <param name="name" value="@{name}" />
      </antcall>

      <!-- If 'dir' was specified, copy the cache file to it -->
      <if-macro property="docopy" condition="defined" arg1="@{dir}"/>
      <antcall target="copy.cached.file.to.dest.docopy=${docopy}">
        <param name="name" value="@{name}" />
        <param name="dir" value="@{dir}" />
      </antcall>
    </sequential>
  </macrodef>

  <!-- Macro to truncate the file copy filter -->
  <macrodef name="truncate-filter-macro">
    <sequential>
      <echo file="${copyfilter.file}" append="no" message="# Build generated file - do not edit!${line.separator}" />
    </sequential>
  </macrodef>
  
	<!-- Check if the repository server is visible. If it isn't    -->
  <!-- then set the 'noftpserver' property, and output a warning -->
  <macrodef name="check-repository-visible-macro">
		<sequential>
      <!-- set a property if we can see the ftp server -->
      <waitfor timeoutproperty="noftpserver" maxwait="500">
        <socket server="gus" port="21" />
      </waitfor>
      <antcall target="no.ftp.server.warning"/>
	  </sequential>
	</macrodef>
  
  <!-- Get a list of jars (or other files) from the repository into the local ./lib folder. -->
  <!-- @param libs-list A collection of get-lib-macro elements.                             -->
  <macrodef name="get-libs-macro">
    <element name="libs-list" optional="no"/>
    <element name="options" optional="yes"/>
    <attribute name="todir" default="${ear.dir}/lib" />
    <sequential>
      <check-repository-visible-macro/>
      <property name="get.libs.macro.todir" value="@{todir}" />
      <unixify-path-macro property="get.libs.macro.todir"/>
      <mkdir dir="${copyfilter.dir}" />
      <options/>
      <libs-list />
    </sequential>
  </macrodef>

  <!-- Fetch an individual jar (or other file) into the local ./lib folder and add its details -->
  <!-- to the lib's filter file.                                                               -->
  <!-- @param name Short name for the file.                                                    -->
  <!-- @param jarname Full name for the file as it appears in the repository.                  -->
  <!-- @param todir destination to copy jar into - default to the ear's lib folder.            -->
  <macrodef name="get-lib-macro">
    <attribute name="name" />
    <attribute name="jarname" />
    <sequential>
      <!-- get the file from the repository, and copy into ./lib -->
      <get-repository-file dir="${get.libs.macro.todir}" name="@{jarname}" />

      <!-- write a line to the filter -->
      <echo file="${copyfilter.file}" append="yes" message="@{name}=lib/@{jarname}${line.separator}" />
    </sequential>
  </macrodef>

  <!-- Macro which sets the ${mysql-running} to true if mysql is running -->
  <macrodef name="set-mysql-running-property-macro">
    <sequential>
      <condition property="mysql-running">
        <socket server="localhost" port="3306"/>
      </condition>
    </sequential>
  </macrodef>
  
	<macrodef name="ail-reset-configurations-macro">
    <element name="configs" optional="no"/>
	  <element name="paths" optional="no"/>
		  <sequential>
      
      <echo message="resetting configurations in database ${dbname}"/>

      <path id="reset.classpath">
        <paths/>
        <dirset dir="${ear.dir}" includes="*.jar"/>
        <dirset dir="${ear.dir}" includes="*.war/WEB-INF/classes"/>

        <fileset dir="${ear.lib}" includes="*.jar"/>
        <fileset dir="${test.dir}" includes="**/*.jar"/>
        <fileset dir="${jboss.dir}">
          <include name="lib/endorsed/xercesImpl.jar"/>
          <include name="client/jbossall-client.jar"/>
          <include name="server/default/deploy/jboss-portal.sar/lib/*.jar"/>
        </fileset>
      </path>

      <property name="plop" refid="reset.classpath"/>
      <echo message="classpath:${plop}"/>  
        
      <java classname="com.ail.core.configure.ConfigurationReset" fork="yes" failonerror="yes" classpathref="reset.classpath">
	      <jvmarg value="-Dcom.ail.core.configure.loader=com.ail.core.configure.JDBCConfigurationLoader"/>
	      <jvmarg value="-Dcom.ail.core.configure.loaderParam.driver=org.gjt.mm.mysql.Driver"/>
	      <jvmarg value="-Dcom.ail.core.configure.loaderParam.url=jdbc:mysql://localhost:3306/${dbname}"/>
	      <jvmarg value="-Dcom.ail.core.configure.loaderParam.user=root"/>
	      <jvmarg value="-Dcom.ail.core.configure.loaderParam.password=bombay2000"/>
	      <jvmarg value="-Dcom.ail.core.configure.loaderParam.table=config"/>
	      <jvmarg value="-Dcom.ail.core.configure.loaderParam.databaseName=${dbname}"/>
        <jvmarg value="-Dorg.xml.sax.parser=org.apache.xerces.parsers.SAXParser"/> 
	      <jvmarg value="-Djavax.xml.transform.TransformerFactory=net.sf.saxon.TransformerFactoryImpl"/>
	      
				<configs/>
	    </java>
    </sequential>
  </macrodef>

</project>

