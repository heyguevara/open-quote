<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 Build Macros for building J2EE projects
 $Revision: 1.27 $
 $State: Exp $
 $Date: 2007/11/23 20:59:04 $
 $Source: /home/bob/CVSRepository/development/BuildJ2EEMacros.xml,v $
-->

<project default="dummy" name="BuildJ2EEMacros.xml">

  <target name="dummy"/>

  <!-- Macro to figure out the deploy path from the ant project name. By convension ant J2EE     -->
  <!-- projects have names like core:core.ear/something.war. This beanshell script creates a new -->
  <!-- ant property "deploy.unit" trimming off the "core:" bit (e.g."core.ear/something.war")    -->
  <macrodef name="_set_output_dir_property_macro">
    <sequential>
      <script language="beanshell">
	      projectName=project.getName();
	      deployDir=project.getProperty("deploy.dir");
	      deployUnit=projectName.replaceAll("^.*:","");
	      project.setProperty("deploy.unit", deployUnit);
	      if (deployUnit.equals("test.jar")) {
            project.setProperty("output.dir", project.getProperty("test.dir")+"/test.jar");
	      }
	      else {
	        project.setProperty("output.dir", deployDir+"/deploy/"+deployUnit);
	      }
	    </script>
    </sequential>
  </macrodef>

  <macrodef name="compile-ear-descriptors-macro">
    <attribute name="overlay" default="false"/>
    <sequential>
      <_set_output_dir_property_macro/>

      <copy todir="${output.dir}/META-INF">
        <filterset filtersfile="${copyfilter.file}"/>
        <fileset dir="META-INF" includes="**/*.properties, **/*.xml, **/*.MF"/>
      </copy>
    </sequential>
  </macrodef>

  <target name="_delete-ear-descriptors-overlay=false">
    <_set_output_dir_property_macro/>
    <delete dir="${output.dir}/META-INF" failonerror="no"/>
  </target>

  <!-- Deleting descriptors in overlay mode means only delete descriptors for which     -->
  <!-- the tree contains the source. In effect we're overlaying this tree's descriptors -->
  <!-- on those from another project.                                                   -->
  <target name="_delete-ear-descriptors-overlay=true">
    <_set_output_dir_property_macro/>
    <delete failonerror="no">
      <fileset dir="${output.dir}/META-INF" includes="**/*.MF, **/*.xml" excludes="Build.xml">
        <present targetdir="${basedir}/META-INF">
          <mapper type="identity"/>
        </present>
      </fileset>
    </delete>
  </target>

  <macrodef name="delete-ear-descriptors-macro">
    <attribute name="overlay" default="false"/>
    <sequential>
      <antcall target="_delete-ear-descriptors-overlay=@{overlay}"/>
    </sequential>
  </macrodef>

  <!-- Macro to build an exploded jar from a source folder.                                         -->
  <!-- The output folder for the compilation is derived from the ant project name. For example, if  -->
  <!-- the ant project's name (taken from it's 'name' attribute) is "core.ear/core.jar", the output -->
  <!-- folder will be ${deploy.dir}/deploy/core.ear/core.jar.                                       -->
  <macrodef name="compile-exploded-jar-macro">
    <attribute name="overlay" default="false"/>
    <element name="javac-classpath" optional="no"/>
    <sequential>

      <_set_output_dir_property_macro/>

      <mkdir dir="${output.dir}"/>

      <!-- compile the java source -->
      <javac destdir="${output.dir}" srcdir="." verbose="no" debug="yes">
        <classpath>
          <javac-classpath/>
        </classpath>
      </javac>

      <!-- Install text files (properties, xml, etc) with the filter turned on -->
      <copy todir="${output.dir}">
        <filterset filtersfile="${copyfilter.file}"/>
        <fileset dir="." includes="**/*.properties, **/*.xml, **/*.wsdl, **/*.jnlp, **/*.html, **/*.MF, **/*.bs, **/*.xsl, **/*.xslt, **/*.drl, **/*.rule, **/*.dsl, **/*.janino" excludes="Build.xml"/>
      </copy>

      <!-- copy binary files with the filter turned off -->
      <copy todir="${output.dir}">
        <fileset dir="." includes="**/*.gif, **/*.jpg, **/*.xls"/>
      </copy>
    </sequential>
  </macrodef>

  <!-- Macro to build an exploded ejb jar file.                                 -->
  <!-- @param overlay True if the effect of running this macro should be to     -->
  <!--   overlay the contents of this EJB's source files on top of an already   -->
  <!--   build EJB of the same name.                                            -->
  <macrodef name="compile-exploded-ejb-jar-macro">
    <attribute name="overlay" default="false"/>
    <element name="javac-classpath" optional="no"/>
    <sequential>

      <_set_output_dir_property_macro/>

      <mkdir dir="${output.dir}"/>

      <!-- compile the java source -->
      <javac destdir="${output.dir}" srcdir="." verbose="no" debug="yes">
        <classpath>
          <javac-classpath/>
        </classpath>
      </javac>

      <!-- Install text files (properties, xml, etc) with the filter turned on -->
      <copy todir="${output.dir}">
        <filterset filtersfile="${copyfilter.file}"/>
        <fileset dir="." includes="**/*.properties, **/*.xml, **/*.wsdl, **/*.jnlp, **/*.html, **/*.MF, **/*.bs, **/*.xsl, **/*.xslt, **/*.drl, **/*.rule, **/*.dsl, **/*.janino" excludes="Build.xml"/>
      </copy>

      <!-- copy binary files with the filter turned off -->
      <copy todir="${output.dir}">
        <fileset dir="." includes="**/*.gif, **/*.jpg, **/*.xls"/>
      </copy>
    </sequential>
  </macrodef>

  <target name="_compile-exploded-war-macro-docompile=true">
    <!-- compile the java source -->
    <javac destdir="${output.dir}/WEB-INF/classes" 
           classpath="${project.classpath}" 
           srcdir="./WEB-INF/src" verbose="no" debug="yes" />

    <copy todir="${output.dir}/WEB-INF/classes">
      <filterset filtersfile="${copyfilter.file}"/>
      <fileset dir="./WEB-INF/src" excludes="Build.xml, **/*.gif, **/*.jpg, **/*.java"/>
    </copy>
  </target>
  <target name="_compile-exploded-war-macro-docompile=false"/>

  <!-- Macro to compile a war project into an exploded war deployment folder -->
  <macrodef name="compile-exploded-war-macro">
    <attribute name="overlay" default="false"/>
    <element name="javac-classpath" optional="no"/>
    <sequential>

      <!-- this will set ${deploy.unit} based on the current projects name -->
      <_set_output_dir_property_macro/>

      <path id="_temp">
        <javac-classpath />
      </path>
      <property name="project.classpath" refid="_temp"/>

      <mkdir dir="${output.dir}"/>
      <mkdir dir="${output.dir}/WEB-INF/classes"/>

      <!-- copy text files (properties, xml, etc) with the filter turned on -->
      <copy todir="${output.dir}">
        <filterset filtersfile="${copyfilter.file}"/>
        <fileset dir="." excludes="WEB-INF/src/**, Build.xml, **/*.gif, **/*.jpg, **/*.java, **/*.jar"/>
      </copy>

      <!-- copy binary files with the filter turned off -->
      <copy todir="${output.dir}">
        <fileset dir="." includes="**/*.gif, **/*.jpg, **/*.jar" excludes="WEB-INF/src/**"/>
      </copy>

      <!-- compile java code if there is any -->
      <if-macro condition="exists" property="docompile" arg1="${basedir}/WEB-INF/src"/>
      <antcall target="_compile-exploded-war-macro-docompile=${docompile}"/>

    </sequential>
  </macrodef>

  <macrodef name="generate-wsdl-for-endpoint-macro">
    <attribute name="classname"/>
    <attribute name="name"/>
    <attribute name="namespace"/>
    <sequential>
      <_set_output_dir_property_macro/>

      <mkdir dir="${output.dir}/META-INF/wsdl"/>

      <!-- build wsdl for service -->
      <axis-java2wsdl location="http://this.value.is.replaced.by.jboss"
                      serviceElementName="@{name}Service"
                      servicePortName="@{name}Endpoint"
                      output="${output.dir}/META-INF/wsdl/@{name}.wsdl"
                      use="LITERAL"
                      className="@{classname}" namespace="@{namespace}">
        <mapping namespace="urn:AIL" package="com.ail.core.configure.server"/>
        <classpath>
          <dirset dir="${ear.dir}" includes="*.jar"/>
          <fileset dir="${jboss.dir}/client" includes="jbossall-client.jar"/>
          <fileset dir="${ear.dir}/lib" includes="*.jar"/>
        </classpath>
      </axis-java2wsdl>
      <compile-exploded-war-macro/>
    </sequential>
  </macrodef>

  <!-- If we're deleting an exploded jar in overlay mode we only want to delete  -->
  <!-- things that we have the source for. For example: for every .java file the -->
  <!-- project has we delete the corresponding .class file - but other .class    -->
  <!-- files are left alone.                                                     -->
  <target name="_delete-exploded-jar-overlay=true">
    <_set_output_dir_property_macro/>
    <delete failonerror="no">
      <fileset dir="${output.dir}" includes="**/*.MF, **/*.xml, **/*.gif, **/*.jpg, **/*.jar" excludes="Build.xml">
        <present targetdir="${basedir}">
          <mapper type="identity"/>
        </present>
      </fileset>
      <fileset dir="${output.dir}" includes="**/*class">
        <present targetdir="${basedir}">
          <mapper type="glob" from="*.class" to="*.java"/>
        </present>
      </fileset>
    </delete>
  </target>

  <!-- If we're deleting an exploded war in overlay mode we only want to delete  -->
  <!-- things that we have the source for. For example: for every .java file the -->
  <!-- project has we delete the corresponding .class file - but other .class    -->
  <!-- files are left alone.                                                     -->
  <target name="_delete-exploded-war-overlay=true">
    <_set_output_dir_property_macro/>
    <delete failonerror="no">
      <fileset dir="${output.dir}" includes="**/*.MF, **/*.jsp, **/*.xml, **/*.gif, **/*.jpg, **/*.jar" excludes="Build.xml, WEB-INF/src/*">
        <present targetdir="${basedir}">
          <mapper type="identity"/>
        </present>
      </fileset>
      <fileset dir="${output.dir}/WEB-INF/classes" includes="**/*class">
        <present targetdir="${basedir}/WEB-INF/src">
          <mapper type="glob" from="*.class" to="*.java"/>
        </present>
      </fileset>
      <fileset dir="${output.dir}/WEB-INF/classes" includes="**/*.xml,**/*.properties">
        <present targetdir="${basedir}/WEB-INF/src">
          <mapper type="identity"/>
        </present>
      </fileset>
    </delete>
  </target>

  <!-- Deleting a exploded jar in non-overlay mode is simple - just delete the -->
  <!-- whole exploded jar.                                                     -->
  <target name="_delete-exploded-jar-overlay=false">
    <_set_output_dir_property_macro/>
    <delete dir="${output.dir}" failonerror="no"/>
  </target>

  <!-- Deleting a exploded war in non-overlay mode is simple - just delete the -->
  <!-- whole exploded war.                                                     -->
  <target name="_delete-exploded-war-overlay=false">
    <_set_output_dir_property_macro/>
    <delete dir="${output.dir}" failonerror="no"/>
  </target>

  <!-- Delete an exploded jar projects output folder -->
  <macrodef name="delete-exploded-jar-macro">
    <attribute name="overlay" default="false"/>
    <sequential>
      <antcall target="_delete-exploded-jar-overlay=@{overlay}"/>
    </sequential>
  </macrodef>

  <!-- Delete an exploded ejb jar projects output folder -->
  <macrodef name="delete-exploded-ejb-jar-macro">
    <attribute name="overlay" default="false"/>
    <sequential>
      <delete-exploded-jar-macro overlay="@{overlay}"/>
    </sequential>
  </macrodef>

  <!-- Delete an exploded war projects output folder -->
  <macrodef name="delete-exploded-war-macro">
    <attribute name="overlay" default="false"/>
    <sequential>
      <antcall target="_delete-exploded-war-overlay=@{overlay}"/>
    </sequential>
  </macrodef>

  <!-- Delete an exploded wsr projects output folder -->
  <macrodef name="delete-exploded-wsr-macro">
    <sequential>
      <delete-exploded-jar-macro/>
    </sequential>
  </macrodef>

  <macrodef name="release-ear-macro">
    <sequential>
      <!-- this will set ${deploy.unit} based on the current projects name -->
      <_set_output_dir_property_macro/>

      <echo level="info" message="release-ear-macro - output.dir: ${output.dir}"/>
    </sequential>
  </macrodef>

  <macrodef name="release-jar-macro">
    <sequential>
      <!-- this will set ${deploy.unit} based on the current projects name -->
      <_set_output_dir_property_macro/>

      <echo level="info" message="release-jar-macro - output.dir: ${output.dir}"/>
    </sequential>
  </macrodef>

  <target name="_install-base-domain" unless="domainpresent">
    <!-- Get the jboss zip into the cache -->
    <repo-get-macro group="ail" artifact="${dar}" version="${version}-build.${build}" repo="localhost/repo" type="dar"/>

    <!-- Determin the whether we want to use the *-snapshot file, or the repository's latest.  -->
    <!-- We'll use which ever is newer on the filesystem                                       -->
    <condition property="dar.src" value="${repo.dir}/ail/${dar}/${version}/${dar}-${version}-snapshot.dar" 
																	 else="${repo.dir}/ail/${dar}/${version}-build.${build}/${dar}-${version}-build.${build}.dar">
      <uptodate srcfile="${repo.dir}/ail/${dar}/${version}-build.${build}/${dar}-${version}-build.${build}.dar" targetfile="${repo.dir}/ail/${dar}/${version}/${dar}-${version}-snapshot.dar"/>
    </condition>

    <!-- Unpack the cached zip into the dev tree -->
    <mkdir dir="${deploy.dir}"/>
    <unzip overwrite="yes" dest="${deploy.dir}" src="${dar.src}"/>
    <delete dir="${deploy.dir}" includes="**/loader.properties"/>

    <move todir="${deploy.dir}/deploy/${name}" >
      <fileset dir="${deploy.dir}/deploy/${dar}.ear"/>
    </move>
  </target>

  <!-- Macro to install jboss in a development tree.   -->
  <!-- @param version The version of jboss to install. -->
  <macrodef name="install-base-domain-macro">
    <attribute name="dar" />
    <attribute name="version"/>
    <attribute name="build"/>
    <attribute name="name" default="${ant.project.name}.ear"/>
    <sequential>
      <available file="${deploy.dir}/deploy/bsh-deployer.xml" property="domainpresent" />
      <antcall target="_install-base-domain">
        <param name="dar" value="@{dar}"/>
        <param name="version" value="@{version}"/>
        <param name="build" value="@{build}"/>
        <param name="name" value="@{name}"/>
      </antcall>
    </sequential>
  </macrodef>

</project>
